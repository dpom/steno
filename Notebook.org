#+TITLE: Notebook
#+DESCRIPTION: notebook for pyproj project
#+AUTHOR: Dan Pomohaci
#+EMAIL: dan.pomohaci@gmail.com
#+STARTUP: overview indent align inlineimages
#+PROPERTY: header-args :cache yes :results silent :padline no

* 2024-12-29

- implement extract-words:
  #+begin_src clojure
(import [os.path :as path])

(path/exists "test.txt") ;;=> false


(import [cv2 :as cv2])

(def image (cv2/imread "test/resources/ex1.jpg"))

(defn extract-word-images
  [page-filename]
  (let [image (cv2/imread page-filename)
        gray (cv2/cvtColor image cv2/COLOR_BGR2GRAY)
        blur (cv2/GaussianBlur gray [5 5] 0)
        thresh (second (cv2/threshold blur 0 255 (+ cv2/THRESH_BINARY_INV
                                                    cv2/THRESH_OTSU)))
        kernel (cv2/getStructuringElement cv2/MORPH_RECT [7 7])
        dilate (cv2/dilate thresh kernel ** :iterations 1)
        cnts* (cv2/findContours dilate cv2/RETR_EXTERNAL cv2/CHAIN_APPROX_SIMPLE)
        cnts (if (= (count cnts*) 2) (first cnts*) (second cnts*))]
    (map (fn [contour]
           (let [[x y w h] (cv2/boundingRect contour)]
             (aget image #py ((slice y (+ y h)) (slice x (+ x w))))
             ))
         cnts)))


(def words (extract-word-images "test/resources/ex1.jpg"))

(cv2/boundingRect (first cnts))
;; => #py (2204 3239 10 8)

(let [[x y w h] (cv2/boundingRect (first cnts))]
  x)
;; => 2204

(class (first cnts))
;; => <class 'numpy.ndarray'>

(first words)
;; => array([[[247, 247, 247],
;;            [238, 238, 238],
;;            [229, 229, 229],
;;            [223, 223, 223],
;;            [216, 216, 216],
;;            [212, 212, 212],
;;            [202, 202, 202],
;;            [188, 188, 188],
;;            [175, 175, 175],
;;            [169, 169, 169]],
;;           [[242, 242, 242],
;;            [228, 228, 228],
;;            [214, 214, 214],
;;            [205, 205, 205],
;;            [192, 192, 192],
;;            [188, 188, 188],
;;            [183, 183, 183],
;;            [180, 180, 180],
;;            [179, 179, 179],
;;            [181, 181, 181]],
;;           [[226, 226, 226],
;;            [211, 211, 211],
;;            [198, 198, 198],
;;            [189, 189, 189],
;;            [162, 162, 162],
;;            [161, 161, 161],
;;            [161, 161, 161],
;;            [163, 163, 163],
;;            [167, 167, 167],
;;            [174, 174, 174]],
;;           [[202, 202, 202],
;;            [187, 187, 187],
;;            [175, 175, 175],
;;            [168, 168, 168],
;;            [142, 142, 142],
;;            [145, 145, 145],
;;            [151, 151, 151],
;;            [159, 159, 159],
;;            [170, 170, 170],
;;            [180, 180, 180]],
;;           [[182, 182, 182],
;;            [168, 168, 168],
;;            [159, 159, 159],
;;            [154, 154, 154],
;;            [151, 151, 151],
;;            [156, 156, 156],
;;            [166, 166, 166],
;;            [178, 178, 178],
;;            [191, 191, 191],
;;            [203, 203, 203]],
;;           [[175, 175, 175],
;;            [165, 165, 165],
;;            [159, 159, 159],
;;            [155, 155, 155],
;;            [168, 168, 168],
;;            [175, 175, 175],
;;            [186, 186, 186],
;;            [199, 199, 199],
;;            [211, 211, 211],
;;            [220, 220, 220]],
;;           [[183, 183, 183],
;;            [178, 178, 178],
;;            [175, 175, 175],
;;            [173, 173, 173],
;;            [180, 180, 180],
;;            [187, 187, 187],
;;            [199, 199, 199],
;;            [211, 211, 211],
;;            [220, 220, 220],
;;            [225, 225, 225]],
;;           [[199, 199, 199],
;;            [198, 198, 198],
;;            [198, 198, 198],
;;            [197, 197, 197],
;;            [192, 192, 192],
;;            [200, 200, 200],
;;            [212, 212, 212],
;;            [225, 225, 225],
;;            [233, 233, 233],
;;            [236, 236, 236]]], dtype=uint8)

(cv2/imwrite "tmp/words/word000.png" (first words))

(format "test %03d" 1)
;; => "test 001"

(map-indexed #(println (str %1 "-" %2)) cnts)

(defn save-words-image
  [words outdir]
  (map-indexed #(cv2/imwrite (format "%s/word%03d.png" outdir %1) %2)  words))

(save-words-image words "tmp/words")

(defmacro mget [m r1 r2 c1 c2]
  `(aget ~m (python/tuple [(python/slice ~r1 ~r2) (python/slice ~c1 ~c2)])))
  #+end_src

* 2025-01-01

- incerc sa reduc grosimea liniilor la un pixel:
  #+begin_src clojure
(import
  [cv2 :as cv2]
  [numpy :as np]
  [matplotlib :as matp]
  [matplotlib.pyplot :as plt])

;; (matp/use "tkagg")

(def img (cv2/imread "test/resources/orig.png"))

(def edges (cv2/Canny  img 100 200))

(defn show
  [img]
  (plt/imshow img ** :cmap "gray")
  (plt/show))

(show img)
(show edges)
;; Valuerror: 'gtkagg' is not a valid value for backend; supported values are ['gtk3agg', 'gtk3cairo', 'gtk4agg', 'gtk4cairo', 'macosx', 'nbagg', 'notebook', 'qtagg', 'qtcairo', 'qt5agg', 'qt5cairo', 'tkagg', 'tkcairo', 'webagg', 'wx', 'wxagg', 'wxcairo', 'agg', 'cairo', 'pdf', 'pgf', 'ps', 'svg', 'template']
  #+end_src 

* 2025-01-02

- continui cu modificarea parametrilor de la canny:
  #+begin_src clojure
(import
  [cv2 :as cv2]
  [numpy :as np]
  [matplotlib :as matp]
  [matplotlib.pyplot :as plt])


(def img (cv2/imread "test/resources/orig.png"))


(defn show
  [img]
  (plt/imshow img ** :cmap "gray")
  (plt/show))


(def edges (cv2/Canny  img 100 200))

(show edges)
  #+end_src

* 2025-01-03

- incerc noi methode:
  #+begin_src clojure
(import
  [cv2 :as cv2])

(require '[steno.utils :as utl])

(def img (cv2/imread "test/resources/words/word010.png"))

(utl/show img)
  #+end_src

* 2025-01-04

- testez metoda gasita in https://docs.opencv.org/3.4/d9/d61/tutorial_py_morphological_ops.html
  #+begin_src clojure
(import
  [cv2 :as cv2]
  [numpy :as np])

(require '[steno.utils :as utl])

(def img (cv2/imread "test/resources/words/word010.png"))

(utl/show img)

(def invert (cv2/bitwise_not img))

(utl/show invert)


(def kernel (np/ones [5 5] np/uint8))

(def erosion (cv2/erode invert kernel ** :iterations 1))

(utl/show erosion)
  #+end_src

- testez metoda gasita in https://theailearner.com/tag/skeletonization-opencv/:
  #+begin_src clojure
(import
  [cv2 :as cv2]
  [numpy :as np])

(require '[steno.utils :as utl])

(def img (cv2/imread "test/resources/words/word010.png"))

(utl/show img)

;; inversez imaginea
(def invert (cv2/bitwise_not img))

(utl/show invert)

;; incerc o filtrare intai 

kernel = np.ones((5,5),np.float32)/25
dst = cv.filter2D(img,-1,kernel)

(def kernel (/ (np/ones [5 5] np/float32) 25))

(def filter-img (cv2/filter2D invert -1 kernel))

(utl/show filter-img)

;; blur

(def blur (cv2/blur invert [5,5]))

(utl/show blur)

;; skeletonization

(def kernel (cv2/getStructuringElement cv2/MORPH_CROSS [3 3]))

(def thin (np/zeros (.- blur shape) ** :dtype "uint8"))

(cv2/countNonZero thin)


(def img2
  (loop [image blur
         result thin]
    (println "step")
    (if (zero? (cv2/countNonZero image))
      result
      (let [erode (cv2/erode image kernel)
            opening (cv2/morphologyEx erode cv2/MORPH_OPEN kernel)
            subset (- erode opening)]
        (recur erode (cv2/bitwise_or subset result))))))

;; binary

(def bin-image
  (second (cv2/threshold blur 175 255 cv2/THRESH_BINARY)))

(utl/show bin-image)

  #+end_src
- incerc scikit
  #+begin_src clojure
(import
  [cv2 :as cv2]
  [numpy :as np]
  [skimage.morphology :as skim])
(require '[steno.utils :as utl])

(def img
  (-> (cv2/imread "test/resources/words/word010.png")
      (cv2/bitwise_not)
      (cv2/blur [5,5])))



(import [skimage.morphology :as skim])




(def img1  (skim/skeletonize img))


(import [skimage.util :as skiu])

(def img2
  (skiu/img_as_ubyte img1))



(utl/show img2)

(def img
  (-> (cv2/imread "test/resources/words/word010.png")
      (cv2/bitwise_not)
      (cv2/blur [5,5])
      (skim/skeletonize)
      (skiu/img_as_ubyte)))

(utl/show img)
  #+end_src
