#+TITLE: Notebook
#+DESCRIPTION: notebook for pyproj project
#+AUTHOR: Dan Pomohaci
#+EMAIL: dan.pomohaci@gmail.com
#+STARTUP: overview indent align inlineimages
#+PROPERTY: header-args :cache yes :results silent :padline no

* 2024-12-29

- implement extract-words:
  #+begin_src clojure
(import [os.path :as path])

(path/exists "test.txt") ;;=> false


(import [cv2 :as cv2])

(def image (cv2/imread "test/resources/ex1.jpg"))

(defn extract-word-images
  [page-filename]
  (let [image (cv2/imread page-filename)
        gray (cv2/cvtColor image cv2/COLOR_BGR2GRAY)
        blur (cv2/GaussianBlur gray [5 5] 0)
        thresh (second (cv2/threshold blur 0 255 (+ cv2/THRESH_BINARY_INV
                                                    cv2/THRESH_OTSU)))
        kernel (cv2/getStructuringElement cv2/MORPH_RECT [7 7])
        dilate (cv2/dilate thresh kernel ** :iterations 1)
        cnts* (cv2/findContours dilate cv2/RETR_EXTERNAL cv2/CHAIN_APPROX_SIMPLE)
        cnts (if (= (count cnts*) 2) (first cnts*) (second cnts*))]
    (map (fn [contour]
           (let [[x y w h] (cv2/boundingRect contour)]
             (aget image #py ((slice y (+ y h)) (slice x (+ x w))))
             ))
         cnts)))


(def words (extract-word-images "test/resources/ex1.jpg"))

(cv2/boundingRect (first cnts))
;; => #py (2204 3239 10 8)

(let [[x y w h] (cv2/boundingRect (first cnts))]
  x)
;; => 2204

(class (first cnts))
;; => <class 'numpy.ndarray'>

(first words)
;; => array([[[247, 247, 247],
;;            [238, 238, 238],
;;            [229, 229, 229],
;;            [223, 223, 223],
;;            [216, 216, 216],
;;            [212, 212, 212],
;;            [202, 202, 202],
;;            [188, 188, 188],
;;            [175, 175, 175],
;;            [169, 169, 169]],
;;           [[242, 242, 242],
;;            [228, 228, 228],
;;            [214, 214, 214],
;;            [205, 205, 205],
;;            [192, 192, 192],
;;            [188, 188, 188],
;;            [183, 183, 183],
;;            [180, 180, 180],
;;            [179, 179, 179],
;;            [181, 181, 181]],
;;           [[226, 226, 226],
;;            [211, 211, 211],
;;            [198, 198, 198],
;;            [189, 189, 189],
;;            [162, 162, 162],
;;            [161, 161, 161],
;;            [161, 161, 161],
;;            [163, 163, 163],
;;            [167, 167, 167],
;;            [174, 174, 174]],
;;           [[202, 202, 202],
;;            [187, 187, 187],
;;            [175, 175, 175],
;;            [168, 168, 168],
;;            [142, 142, 142],
;;            [145, 145, 145],
;;            [151, 151, 151],
;;            [159, 159, 159],
;;            [170, 170, 170],
;;            [180, 180, 180]],
;;           [[182, 182, 182],
;;            [168, 168, 168],
;;            [159, 159, 159],
;;            [154, 154, 154],
;;            [151, 151, 151],
;;            [156, 156, 156],
;;            [166, 166, 166],
;;            [178, 178, 178],
;;            [191, 191, 191],
;;            [203, 203, 203]],
;;           [[175, 175, 175],
;;            [165, 165, 165],
;;            [159, 159, 159],
;;            [155, 155, 155],
;;            [168, 168, 168],
;;            [175, 175, 175],
;;            [186, 186, 186],
;;            [199, 199, 199],
;;            [211, 211, 211],
;;            [220, 220, 220]],
;;           [[183, 183, 183],
;;            [178, 178, 178],
;;            [175, 175, 175],
;;            [173, 173, 173],
;;            [180, 180, 180],
;;            [187, 187, 187],
;;            [199, 199, 199],
;;            [211, 211, 211],
;;            [220, 220, 220],
;;            [225, 225, 225]],
;;           [[199, 199, 199],
;;            [198, 198, 198],
;;            [198, 198, 198],
;;            [197, 197, 197],
;;            [192, 192, 192],
;;            [200, 200, 200],
;;            [212, 212, 212],
;;            [225, 225, 225],
;;            [233, 233, 233],
;;            [236, 236, 236]]], dtype=uint8)

(cv2/imwrite "tmp/words/word000.png" (first words))

(format "test %03d" 1)
;; => "test 001"

(map-indexed #(println (str %1 "-" %2)) cnts)

(defn save-words-image
  [words outdir]
  (map-indexed #(cv2/imwrite (format "%s/word%03d.png" outdir %1) %2)  words))

(save-words-image words "tmp/words")

(defmacro mget [m r1 r2 c1 c2]
  `(aget ~m (python/tuple [(python/slice ~r1 ~r2) (python/slice ~c1 ~c2)])))
  #+end_src

* 2025-01-01

- incerc sa reduc grosimea liniilor la un pixel:
  #+begin_src clojure
(import
  [cv2 :as cv2]
  [numpy :as np]
  [matplotlib :as matp]
  [matplotlib.pyplot :as plt])

(matp/use "tkagg")

(def img (cv2/imread "test/resources/orig.png"))

(def edges (cv2/Canny  img 100 200))

(defn show
  [img]
  (plt/imshow img ** :cmap "gray")
  (plt/show))

(show img)

  #+end_src 
