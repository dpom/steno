* steno
  :PROPERTIES:
  :CATEGORY: steno
  :END:

steno is a personal project to digitize my stenographic writings.


** Description

In my youth most of my notes were written in shorthand (Duployer system). This project aims to digitize old notes and integrate them into the current note system (org-roam).

The method would contain 2 steps:
1. scan the notes page by page
2. transform each image into a text file

Another goal of this project is to check the viability of basilisp (clojure on python vm). Python has many interesting libraries (especially in the science part) but has horrible syntax so basilisp could be a very good solution.

*** Archtecture

The application should be a simple pipe:
- extractor :: split the page image in word images
- image-processor :: clean and simplify the word image
- converter :: convert the word image in a sequence of numbers
- translator :: convert the number sequence in a string of chars

  
** Getting Started

*** Linux, MacOS, and Windows (WSL2)

1. Install
   - direnv
   - nix (https://nixos.org/download/#nix-install-linux)
2. Create an ~.envrc.local~ file (see [[file:doc/SDA.pdf][.envrc.local.example]]).
3. In the project folder run:
   #+begin_src shell
direnv allow
   #+end_src
   first time it will be a long process to download all packages and libraries.

*** Windows (non WSL2)

1. Install
   - python 3.12+
   - uv (https://docs.astral.sh/uv/getting-started/installation/)
   - babashka
   - cljfmt
   - kondo 
2. Create manually the user variables defined in  ~.envrc.local.example~.
3. In the project folder run:
   #+begin_src shell
uv venv
uv sync
   #+end_src

** Usage

The application could be run with the command:
#+begin_src shell
bb app <params>
#+end_src

To see the =params= available run:
#+begin_src shell
bb app -h
#+end_src

** Development


To format the code run:
#+begin_src shell
bb format
#+end_src

To lint the code run:
#+begin_src shell
bb kondo
#+end_src

To make sure that no unformatted commits with lint errors end up in the main branch run initially:
#+begin_src shell
git config --local  core.hooksPath ./githooks
#+end_src
The ~pre-push~ script will block the push if there are style or lint errors in code.

** Tasks
*** DONE #1 Refactor project layout to use basilisp
*** DONE #3 Split the page image in word images
*** DONE #4 Reduce lines to 1 pixel
*** DONE #5 Convert a word image in a number sequence
*** DONE #8  Order of word images bug
SCHEDULED: <2025-06-20 Vi>
:LOGBOOK:
CLOCK: [2025-06-20 Vi 12:21]--[2025-06-20 Vi 12:25] =>  0:04
CLOCK: [2025-06-20 Vi 08:36]--[2025-06-20 Vi 11:22] =>  2:46
:END:
*** DONE #9 Build the "standard" sequences
*** TODO #16 Build an AI translator enhancement
*** DONE #17 Order of letter in word sequence bug
SCHEDULED: <2025-06-19 Jo>
:LOGBOOK:
CLOCK: [2025-06-19 Jo 09:48]--[2025-06-19 Jo 11:32] =>  1:44
:END:
*** DONE #21 Make translator system modular
SCHEDULED: <2025-06-25 Mi>
:LOGBOOK:
CLOCK: [2025-06-25 Mi 14:21]--[2025-06-26 Jo 13:30] => 23:09
:END:
*** DONE #23 Improve freq translator
SCHEDULED: <2025-06-30 Lu>
:LOGBOOK:
CLOCK: [2025-07-04 Vi 06:33]
CLOCK: [2025-07-01 Ma 07:03]--[2025-07-01 Ma 17:41] => 10:38
:END:
*** #25 Build a diff translator
SCHEDULED: <2025-07-09 Mi>
* References

1. https://en.wikipedia.org/wiki/Duployan_shorthand
2. https://opencv.org/
3. https://theailearner.com/tag/skeletonization-opencv/
4. https://github.com/Wesley-Li/skeleton
5. https://docs.opencv.org/4.x/d9/d61/tutorial_py_morphological_ops.html

** License


This project is released under the GNU General Public License. See the [[file:LICENSE][file]] for details.
