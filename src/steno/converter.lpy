(ns steno.converter
  (:require
    [basilisp.set :as set]
    [steno.utils :as utl]))


(def directions
  [[0  1] ; E
   [1  1] ; SE
   [1  0] ; S
   [1 -1] ; SV
   [0 -1] ; V
   [-1 -1] ; NV
   [-1  0] ; N
   [-1  1] ; NE
   ])


(def pos [2r10000000
          2r01000000
          2r00100000
          2r00010000
          2r00001000
          2r00000100
          2r00000010
          2r00000001])


(def dummy-cell [-1 -1])


(defn image2matrix
  "Convert an image to binary matrix."
  [img]
  (let [[rows cols _] (.- img shape)]
    (mapv (fn [i]
            (mapv (fn [j]
                    (if (bool (zero? (apply + (aget img i j)))) 0 1))
              (range 0 cols)))
      (range 0 rows))))


(defn get-cell-value
  "Get cell value. If row or column index is wrong return 0."
  [mat row column]
  (try
    (aget mat row column)
    (catch Exception e
      0)))


(defn get-neighbor
  "Get the neighbor cell (address and value)."
  [mat [r c] [dr dc]]
  (let [nr (+ r dr)
        nc (+ c dc)]
    [[nr nc] (if (or (neg? nr) (neg? nc))
               0
               (get-cell-value mat nr nc))]))


(defn get-cell-number-and-neighbors
  "Get all neighbors with 1 and the cell number"
  [mat cell]
  (reduce (fn [[neighbors num] dir]
            (let [[np v] (get-neighbor mat cell dir)]
              [(if (zero? v) neighbors (conj neighbors np)) (+ (* num 2) v)]))
    [#{} 0]
    directions))


(defn get-start-cells
  "Find the cells where the word could start."
  [mat]
  (let [max-row (count mat)
        max-col (count (first mat))]
    (loop [acc []
           row 0
           col 0]
      (let [[neighbors _] (get-cell-number-and-neighbors mat [row col])
            new-acc (if (and (= (get-cell-value mat row col) 1)
                          (= (count neighbors) 1))
                      (conj acc [row col])
                      acc)
            new-col (inc col)
            new-row (if (= new-col max-col) (inc row) row)
            new-col (if (= new-row row) new-col 0)]
        (if (= new-row max-row)
          new-acc
          (recur new-acc new-row new-col))))))


(defn get-min-start-cell
  "Return the cell that has the highest probability of being the beginning of the word."
  [start-cells]
  (first
    (reduce (fn [[min-cell sum] cell]
              (let [new-sum (apply + cell)]
                (if (< new-sum sum)
                  [cell new-sum]
                  [min-cell sum])))
      [dummy-cell (float "inf")]
      start-cells)))


(defn get-first-one
  "Return the first cell with the value one."
  [mat]
  (let [max-row (count mat)
        max-col (count (first mat))]
    (loop [row 0
           col 0]
      (if (= (get-cell-value mat row col) 1)
        [row col]
        (let [new-col (inc col)
              new-row (if (= new-col max-col) (inc row) row)
              new-col (if (= new-row row) new-col 0)]
          (if (= new-row max-row)
            dummy-cell
            (recur new-row new-col)))))))


(defn get-start-cell
  [mat]
  (let [cells (get-start-cells mat)]
    (case (count cells)
      0 (get-first-one mat)
      1 (first cells)
      (get-min-start-cell cells))))


(defn get-next-neighbors
  [mat start-cell prev-cell]
  (-> (get-cell-number-and-neighbors mat start-cell)
    first
    (disj prev-cell)))


(defn get-liniar-sequence
  "Return a liniar numeric sequence.

   Params:
   - mat : the word matrix
   - status: (map) status of the extracting process
     - start-cell : [row column]
     - prev-cells : (set) previous cells with value 1 processed

   Returns: status map updated + numseq"
  [mat {:keys [start-cell prev-cells]}]
  (loop [start start-cell
         prev prev-cells
         line []]
    (let [[neighbors val] (get-cell-number-and-neighbors mat start)
          new-neighbors (set/difference neighbors prev)
          new-line (conj line (conj start val))
          new-prev (conj prev start)]
      ;; (tap> {:cell start :val val :neighbors new-neighbors})
      (if-not (= (count new-neighbors) 1)
        {:start-cells new-neighbors
         :prev-cells new-prev
         :line new-line}
        (recur (first new-neighbors) new-prev new-line)))))


(defn parallel-lineseq?
  "True if line sequence is a loop"
  [lseq]
  (= (utl/nested-levels lseq) 3))


(defn parallel2liniar
  "Transform a one line parallel sequence into a liniar sequence"
  [line-seq]
  (let [lseq (filterv seq line-seq)]
    (if (and (parallel-lineseq? lseq) (= (count lseq) 1))
      (first lseq)
      lseq)))


(defn get-parallel-sequence
  "Return a parallel numeric sequence. The parallel numeric sequence contains usual 2 liniar sequences forming a loop.

   Params:
   - mat : the word matrix
   - status: (map) status of the extracting process
      - start-cells : (set) cells to process
      - prev-cells : (set) previous cells with value 1
  
   Returns: state map updated + :line (the line sequence)  "
  [mat {:keys [start-cells prev-cells]}]
  (let [{:keys [line] :as state} (reduce (fn [acc cell]
                                           ;; (tap> {:cell cell})
                                           ;; (tap> acc)
                                           (if (get (:prev-cells acc) cell)
                                             acc
                                             (let [new-seq (get-liniar-sequence mat
                                                             (assoc acc
                                                               :start-cell cell))
                                                   new-acc  {:prev-cells (:prev-cells new-seq)
                                                             :line (conj (:line acc) (:line new-seq))
                                                             :start-cells (into (:start-cells acc) (:start-cells new-seq))}]
                                               ;; (tap> new-acc)
                                               new-acc)))
                                   {:prev-cells prev-cells
                                    :line []
                                    :start-cells #{}}
                                   start-cells)]
    (assoc state :line (parallel2liniar line))))


(defn extract-neighbors
  "Extract neighbors cells from a cell number"
  [num [x y]]
  (set (filter identity
         (map (fn [[dx dy] p]
                (if (zero? (bit-and num p))
                  nil
                  [(+ x dx) (+ y dy)]))
           directions pos))))


(defn neighbors?
  "True if the cells are adiacent"
  [[x1 y1 _] [x2 y2 _]]
  (<= (+ (abs (- x1 x2))  (abs (- y1 y2))) 2))


(defn small-lineseq?
  "True if lineseq size is small (5-)"
  [lseq]
  (let [size (count lseq)]
    (and (pos? size) (< size 5))))


(defn get-ltype
  "Returns the line sequence type: loop (0) or liniar (1)"
  [lseq]
  (if (and (not (small-lineseq? lseq)) (neighbors? (first lseq) (last lseq))) 0 1))


(defn continuation?
  "True if the 2 line sequences are adiacent"
  [lseq1 lseq2]
  (neighbors? (last lseq1) (first lseq2)))


(defn loop?
  "True if the 2 line sequences build a loop"
  [lseq1 lseq2]
  (and (neighbors? (first lseq1) (first lseq2))
    (neighbors? (last lseq1) (last lseq2))))


(defn reverse-loop?
  "True if the 2 line sequences build a loop, second lseq is reversed"
  [lseq1 lseq2]
  (and (neighbors? (first lseq1) (last lseq2))
    (neighbors? (last lseq1) (first lseq2))))


(defn process-lineseq
  [{:keys [prev res modifs-count]} lseq]
  (tap> {:lseq lseq})
  (tap> {:modifs-count modifs-count})
  (tap> {:prev prev})
  (tap> {:res res})
  (if (parallel-lineseq? lseq)
    (let [[lseq1 lseq2] lseq]
      (cond
        (= (or (get-ltype lseq1) 0) (= (get-ltype lseq2) 0))
        {:prev nil
         :res (filterv identity  (conj res prev lseq1 lseq2))
         :modifs-count (inc modifs-count)}
        (loop? lseq1 lseq2)
        {:prev nil
         :res (filterv identity  (conj res prev (into lseq1 (rseq lseq2))))
         :modifs-count (inc modifs-count)}
        :else
        {:prev lseq2
         :res (filterv identity  (conj res prev lseq1))
         :modifs-count (inc modifs-count)}))
    (cond
      (= (get-ltype lseq) 0)
      {:prev nil
       :res (filterv identity  (conj res prev lseq))
       :modifs-count modifs-count}
      (small-lineseq? prev) ; small  prev, add it to the lseq
      {:prev (into prev lseq)
       :res res
       :modifs-count (inc modifs-count)}
      (and prev (loop? prev lseq))
      {:prev nil
       :res (filterv identity  (conj res (into prev (rseq lseq))))
       :modifs-count (inc modifs-count)}
      (and prev (reverse-loop? prev lseq))
      {:prev nil
       :res (filterv identity  (conj res (into prev lseq)))
       :modifs-count (inc modifs-count)}
      :else
      {:prev lseq
       :res (filterv identity (conj res prev))
       :modifs-count modifs-count})))


(defn format-lineseq
  [lineseq]
  (let [{:keys [prev res modifs-count]} (reduce process-lineseq
                                          {:prev nil
                                           :res []
                                           :modifs-count 0}
                                          lineseq)
        new-lineseq (filterv identity (conj res prev))]
    (tap> {:modifs modifs-count
           :lineseq new-lineseq})
    (if (zero? modifs-count)
      (mapv (fn [ls] {:ltype (get-ltype ls) :line (mapv #(subvec % 0 2) ls) :numseq (mapv last ls)}) new-lineseq)
      (format-lineseq new-lineseq))))


;; module entry points

(defn matrix2lineseq
  "Convert a word matrix in a vector of line sequences."
  [mat]
  (loop [state {:start-cells #{(get-start-cell mat)}
                :prev-cells #{}
                :line []}
         acc []]
    ;; (tap> state)
    (let [new-state (if (= (count (:start-cells state)) 1)
                      (get-liniar-sequence mat (assoc state :start-cell (first (:start-cells state))))
                      (get-parallel-sequence mat state))
          new-acc (conj acc (:line new-state))]
      (if (empty? (:start-cells new-state))
        (filterv seq new-acc)
        (recur new-state new-acc)))))


(defn numseq2matrix
  "Convert a numeric sequence in a binary matrix"
  [numseq]
  (let [start-cell [100 100]
        cells* (:cells (reduce (fn [{:keys [cells start prev] :as acc} num]
                                 ;; (tap> acc)
                                 (let [new-cells (-> num
                                                   (extract-neighbors start)
                                                   (disj prev))]
                                   ;; (tap> {:new-cells new-cells})
                                   {:cells (into cells new-cells)
                                    :start (first new-cells)
                                    :prev start}))
                         {:cells #{start-cell}
                          :start start-cell
                          :prev dummy-cell}
                         numseq))
        x-min (dec (apply min (map first cells*)))
        y-min (dec (apply min (map second cells*)))
        cells (mapv (fn [[x y]] [(- x x-min) (- y y-min)]) cells*)
        x-max (inc (apply max (map first cells)))
        y-max (inc (apply max (map second cells)))]
    (utl/cells2matrix [x-max y-max] cells)))


(comment

  (import [cv2 :as cv2])

  (add-tap (bound-fn* utl/print4tap))
  
  (defn build-model
    [fileimage]
    (let [mat* (image2matrix (cv2/imread fileimage))
          lineseq* (matrix2lineseq mat*)
          _ (tap> {:lseq* lineseq*})
          lineseq (format-lineseq lineseq*)]
      (tap> {:lseq lineseq})
      (doseq [ls lineseq]
        (utl/show-matrix (utl/cells2matrix [100 100] (:line ls))))
      {:mat* mat*
       :lseq lineseq
       :lseq* lineseq*}))


  (def a-model (build-model "tmp/templates/word015.png"))
  (def ale-model (build-model "tmp/templates/word000.png"))
  (def am-model (build-model "tmp/templates/word004.png"))
  (def ap-model (build-model "tmp/templates/word012.png"))
  (def c-model (build-model "tmp/templates/word026.png"))
  (def e-model (build-model "tmp/templates/word020.png"))
  (def f-model (build-model "tmp/templates/word025.png"))
  (def i-model (build-model "tmp/templates/word016.png"))
  (def j-model (build-model "tmp/templates/word013.png"))
  (def joc-model (build-model "tmp/templates/word002.png"))
  (def l-model (build-model "tmp/templates/word024.png"))
  (def m-model (build-model "tmp/templates/word017.png"))
  (def mos-model (build-model "tmp/templates/word003.png"))
  (def n-model (build-model "tmp/templates/word018.png"))
  (def o-model (build-model "tmp/templates/word021.png"))
  (def om-model (build-model "tmp/templates/word006.png"))
  (def p-model (build-model "tmp/templates/word023.png"))
  (def pat-model (build-model "tmp/templates/word007.png"))
  (def pi-model (build-model "tmp/templates/word001.png"))
  (def por-model (build-model "tmp/templates/word009.png"))
  (def pot-model (build-model "tmp/templates/word008.png"))
  (def s-model (build-model "tmp/templates/word014.png"))
  (def sat-model (build-model "tmp/templates/word005.png"))
  (def t-model (build-model "tmp/templates/word022.png"))
  (def ta-model (build-model "tmp/templates/word011.png"))
  (def tata-model (build-model "tmp/templates/word010.png"))
  (def tz-model (build-model "tmp/templates/word019.png"))

  ;;
  )
