(ns steno.converter
  (:require
    [basilisp.set :as set]))


(def directions
  [[0  1] ; E
   [1  1] ; SE
   [1  0] ; S
   [1 -1] ; SV
   [0 -1] ; V
   [-1 -1] ; NV
   [-1  0] ; N
   [-1  1] ; NE
   ])


(def dummy-cell [-1 -1])


(defn image->matrix
  "Convert an image to binary matrix."
  [img]
  (let [[rows cols _] (.- img shape)]
    (mapv (fn [i]
            (mapv (fn [j]
                    (if (bool (zero? (apply + (aget img i j)))) 0 1))
              (range 0 cols)))
      (range 0 rows))))


(defn get-cell-value
  "Get cell value. If row or column index is wrong return 0."
  [mat row column]
  (try
    (aget mat row column)
    (catch Exception e
      0)))


(defn get-neighbor
  "Get the neighbor cell (address and value)."
  [mat [r c] [dr dc]]
  (let [nr (+ r dr)
        nc (+ c dc)]
    [[nr nc] (if (or (neg? nr) (neg? nc))
               0
               (get-cell-value mat nr nc))]))


(defn get-cell-number-and-neighbors
  "Get all neighbors with 1 and the cell number"
  [mat cell]
  (reduce (fn [[neighbors num] dir]
            (let [[np v] (get-neighbor mat cell dir)]
              [(if (zero? v) neighbors (conj neighbors np)) (+ (* num 2) v)]))
    [#{} 0]
    directions))


(defn get-start-cells
  "Find the cells where the word could start."
  [mat]
  (let [max-row (count mat)
        max-col (count (first mat))]
    (loop [acc []
           row 0
           col 0]
      (let [[neighbors _] (get-cell-number-and-neighbors mat [row col])
            new-acc (if (and (= (get-cell-value mat row col) 1)
                          (= (count neighbors) 1))
                      (conj acc [row col])
                      acc)
            new-col (inc col)
            new-row (if (= new-col max-col) (inc row) row)
            new-col (if (= new-row row) new-col 0)]
        (if (= new-row max-row)
          new-acc
          (recur new-acc new-row new-col))))))


(defn get-min-start-cell
  "Return the cell that has the highest probability of being the beginning of the word."
  [start-cells]
  (first
    (reduce (fn [[min-cell sum] cell]
              (let [new-sum (apply + cell)]
                (if (< new-sum sum)
                  [cell new-sum]
                  [min-cell sum])))
      [dummy-cell (float "inf")]
      start-cells)))


(defn get-first-one
  "Return the first cell with the value one."
  [mat]
  (let [max-row (count mat)
        max-col (count (first mat))]
    (loop [row 0
           col 0]
      (if (= (get-cell-value mat row col) 1)
        [row col]
        (let [new-col (inc col)
              new-row (if (= new-col max-col) (inc row) row)
              new-col (if (= new-row row) new-col 0)]
          (if (= new-row max-row)
            dummy-cell
            (recur new-row new-col)))))))


(defn get-start-cell
  [mat]
  (let [cells (get-start-cells mat)]
    (case (count cells)
      0 (get-first-one mat)
      1 (first cells)
      (get-min-start-cell cells))))


(defn get-next-neighbors
  [mat start-cell prev-cell]
  (-> (get-cell-number-and-neighbors mat start-cell)
    first
    (disj prev-cell)))


(defn get-liniar-sequence
  "Return a liniar numeric sequence.

   Params:
   - mat : the word matrix
   - start-cell : [row column]
   - prev-cell : previous cell in sequence (dummy cell if new sequence)

   Returns: [next-start-cell next-prev-cell numeric-sequence]  "
  [mat start-cell prev-cell]
  (loop [start start-cell
         prev prev-cell
         acc []]
    (let [[neighbors val] (get-cell-number-and-neighbors mat start)
          new-neighbors (disj neighbors prev)
          new-acc (conj acc val)
          num (count new-neighbors)]
      (tap> {:cell start :val val :neighbors new-neighbors})
      (cond
        (zero? num) [dummy-cell start new-acc]
        (= num 1) (recur (first new-neighbors) start new-acc)
        :else [start prev acc]))))


(defn get-parallel-sequence
  "Return a parallel numeric sequence. The parallel numeric sequence contains usual 2 liniar sequences forming a loop.

   Params:
   - mat : the word matrix
   - start-cell : [row column]
   - prev-cell : previous cell in sequence (dummy cell if new sequence)

   Returns: [next-start-cell next-prev-cell parallel-numeric-sequences]  "
  [mat start prev]
  (let [neighbors         (get-next-neighbors mat start prev)
        _                 (tap> {:cell start :prev prev :neighbors neighbors})
        res               (map (fn [cell]
                                 (tap> {:cell cell})
                                 (get-liniar-sequence mat cell start))
                            neighbors)
        seqs              (mapv #(nth % 2) res)
        new-prevs         (set (map first res))
        next-neighbors    (->> res
                            (map (fn [[s p _]]
                                   (get-next-neighbors mat s p)))
                            (apply set/union)
                            (set))
        new-prev          (first (set/difference next-neighbors new-prevs))
        [new-neighbors _] (get-cell-number-and-neighbors mat new-prev)
        new-start         (-> new-neighbors
                            (set/difference next-neighbors)
                            first)]
    [new-start new-prev seqs]))


;; module entry point

(defn matrix->numseq
  "Convert a word matrix in a vector of numeric sequences."
  [mat]
  (loop [start (get-start-cell mat)
         prev dummy-cell
         acc []]
    (let [[new-start new-prev seq] (get-liniar-sequence mat start prev)]
      (if (= new-start dummy-cell)
        (conj acc seq)
        (let [[st pr pseqs] (get-parallel-sequence mat new-start new-prev)]
          (recur st pr (conj acc seq pseqs)))))))


(comment

  (import [cv2 :as cv2])

  (require '[steno.utils :as utl])

  (def p-template (image->matrix (cv2/imread "tmp/templates/word023.png")))
  
  (def t-template (image->matrix (cv2/imread "tmp/templates/word022.png")))

  (def c-template (image->matrix (cv2/imread "tmp/templates/word026.png")))

  (def p-seq (matrix->numseq p-template))
  ;; => [[16 33 18 33 34 34 34 34 18 33 34 34 34 34 34 66 36 18 33 34 34 34 34 66 36 34 34 34 34 34 34 34 34 2]]

  
  
  (def t-seq (matrix->numseq t-template))
  ;; => [[128 136 136 136 136 9 144 136 136 9 144 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 8]]

  (def c-seq  (matrix->numseq c-template))
  ;; => [[16 33 18 33 18 33 18 17 33 18 33 18 17 33 18 33 18 33 18 33 18 17 33 18 17 33 18 17 17 1]]
  

  (utl/show-matrix c-template)

  (require '[basilisp-pprint.pprint :as p])


  (def big-map (zipmap
                 [:a :b :c :d :e]
                 (repeat
                   (zipmap [:a :b :c :d :e]
                           (take 5 (range))))))
  ;; => #'user/big-map

  big-map
  ;; => {:e {:e 4 :a 0 :c 2 :d 3 :b 1} :a {:e 4 :a 0 :c 2 :d 3 :b 1} :c {:e 4 :a 0 :c 2 :d 3 :b 1} :d {:e 4 :a 0 :c 2 :d 3 :b 1} :b {:e 4 :a 0 :c 2 :d 3 :b 1}}

  (p/pprint big-map)

  (p/print-table [:a] [{:a [1 2 3]} {:a 7}])

  (defn print
    [map]
    (p/print-table (keys map) [map]))
  

  (print {:a 2 :b {:a 1 :b "cucu"}})

  (add-tap (bound-fn* print))

  (tap> {:a 2 :b 5})

  (def pat-template (image->matrix (cv2/imread "tmp/templates/word007.png")))

  (utl/show-matrix pat-template)

  (def pat-seq (matrix->numseq pat-template))
  pat-seq
  ;; => [[32 34 34 34 34 34 34 34 34 34 34 34 66 36 34 34 34 34 34 34 34 34 18 33 34 34 34 34 34] [[9 136 136 136 136 136 144 17 33 18 33 18 33 34 34 34 66 36 34 66 68 68 68 132 136 136 136 9 18 33 17 18 34 34 34 34 34 34 34 34 33 18] [68]] [9 144 136 136 136 136 136 136 136 136 136 136 9 144 136 136 136 136 136 136 136 136 136 136 136 136 136 8]]

  ;;
  )
