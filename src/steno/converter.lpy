(ns steno.converter
  "Convert images in numeric sequences"
  (:require
    [basilisp.set :as set]
    [steno.utils :as utl])
  (:import [cv2 :as cv2]))

(def directions
  [[0  1] ; E
   [1  1] ; SE
   [1  0] ; S
   [1 -1] ; SV
   [0 -1] ; V
   [-1 -1] ; NV
   [-1  0] ; N
   [-1  1] ; NE
   ])

(def ^{:doc "Direction position in the cell number"} pos
  [2r10000000 ; E  
   2r01000000 ; SE 
   2r00100000 ; S  
   2r00010000 ; SV 
   2r00001000 ; V  
   2r00000100  ; NV
   2r00000010  ; N 
   2r00000001] ; NE
  )

(def dummy-cell [-1 -1])

(def ^{:doc "Factor that determines how close two cells must be to be neighbors (sum of dx and dy)"} neighbor-factor 10)

(def lineseq-min-size 10)

(def tap-topic "converter")

(defn- image-to-matrix
  "Convert an image to binary matrix."
  [img]
  (let [[rows cols _] (.- img shape)]
    (mapv (fn [i]
            (mapv (fn [j]
                    (if (bool (zero? (apply + (aget img i j)))) 0 1))
                  (range 0 cols)))
          (range 0 rows))))

(defn- get-cell-value
  "Get cell value. If row or column index is wrong return 0."
  [mat row column]
  (try
    (aget mat row column)
    (catch Exception e
      0)))

(defn- get-neighbor
  "Get the neighbor cell (address and value)."
  [mat [r c] [dr dc]]
  (let [nr (+ r dr)
        nc (+ c dc)]
    [[nr nc] (if (or (neg? nr) (neg? nc))
               0
               (get-cell-value mat nr nc))]))

(defn- get-cell-number-and-neighbors
  "Get all neighbors with 1 and the cell number"
  [mat cell]
  (reduce (fn [[neighbors num] dir]
            (let [[np v] (get-neighbor mat cell dir)]
              [(if (zero? v) neighbors (conj neighbors np)) (+ (* num 2) v)]))
          [#{} 0]
          directions))

(defn- get-start-cells
  "Find the cells where the word could start."
  [mat]
  (let [max-row (count mat)
        max-col (count (first mat))]
    (loop [acc []
           row 0
           col 0]
      (let [[neighbors _] (get-cell-number-and-neighbors mat [row col])
            new-acc (if (and (= (get-cell-value mat row col) 1)
                             (= (count neighbors) 1))
                      (conj acc [row col])
                      acc)
            new-col (inc col)
            new-row (if (= new-col max-col) (inc row) row)
            new-col (if (= new-row row) new-col 0)]
        (if (= new-row max-row)
          new-acc
          (recur new-acc new-row new-col))))))

(defn- get-min-start-cell
  "Return the cell that has the highest probability of being the beginning of the word."
  [start-cells]
  (first
    (reduce (fn [[min-cell sum] cell]
              (let [new-sum (apply + cell)]
                (if (< new-sum sum)
                  [cell new-sum]
                  [min-cell sum])))
            [dummy-cell (float "inf")]
            start-cells)))

(defn- get-first-one
  "Return the first cell with the value one."
  [mat]
  (let [max-row (count mat)
        max-col (count (first mat))]
    (loop [row 0
           col 0]
      (if (= (get-cell-value mat row col) 1)
        [row col]
        (let [new-col (inc col)
              new-row (if (= new-col max-col) (inc row) row)
              new-col (if (= new-row row) new-col 0)]
          (if (= new-row max-row)
            dummy-cell
            (recur new-row new-col)))))))

(defn- get-start-cell
  [mat]
  (let [cells (get-start-cells mat)]
    (case (count cells)
      0 (get-first-one mat)
      1 (first cells)
      (get-min-start-cell cells))))

(defn- get-next-neighbors
  [mat start-cell prev-cell]
  (-> (get-cell-number-and-neighbors mat start-cell)
      first
      (disj prev-cell)))

(defn- get-liniar-sequence
  "Return a liniar numeric sequence.

   Params:
   - mat : the word matrix
   - status: (map) status of the extracting process
     - start-cell : [row column]
     - prev-cells : (set) previous cells with value 1 processed

   Returns: status map updated + numseq"
  [mat {:keys [start-cell prev-cells]}]
  (loop [start start-cell
         prev prev-cells
         line []]
    (let [[neighbors val] (get-cell-number-and-neighbors mat start)
          new-neighbors (set/difference neighbors prev)
          new-line (conj line (conj start val))
          new-prev (conj prev start)]
      (tap> tap-topic {:cell start :val val :neighbors new-neighbors})
      (if-not (= (count new-neighbors) 1)
        {:start-cells new-neighbors
         :prev-cells new-prev
         :line new-line}
        (recur (first new-neighbors) new-prev new-line)))))

(defn- parallel-lineseq?
  "True if line sequence is a loop"
  [lseq]
  (= (utl/nested-levels lseq) 3))

(defn- parallel-to-liniar
  "Transform a one line parallel sequence into a liniar sequence"
  [line-seq]
  (let [lseq (filterv seq line-seq)]
    (if (and (parallel-lineseq? lseq) (= (count lseq) 1))
      (first lseq)
      lseq)))

(defn- get-parallel-sequence
  "Return a parallel numeric sequence. The parallel numeric sequence contains usual 2 liniar sequences forming a loop.

   Params:
   - mat : the word matrix
   - status: (map) status of the extracting process
      - start-cells : (set) cells to process
      - prev-cells : (set) previous cells with value 1
  
   Returns: state map updated + :line (the line sequence)  "
  [mat {:keys [start-cells prev-cells]}]
  (let [{:keys [line] :as state} (reduce (fn [acc cell]
                                           (tap> tap-topic {:cell cell})
                                           (tap> tap-topic acc)
                                           (if (get (:prev-cells acc) cell)
                                             acc
                                             (let [new-seq (get-liniar-sequence mat
                                                                                (assoc acc
                                                                                       :start-cell cell))
                                                   new-acc  {:prev-cells (:prev-cells new-seq)
                                                             :line (conj (:line acc) (:line new-seq))
                                                             :start-cells (into (:start-cells acc) (:start-cells new-seq))}]
                                               (tap> tap-topic new-acc)
                                               new-acc)))
                                         {:prev-cells prev-cells
                                          :line []
                                          :start-cells #{}}
                                         start-cells)]
    (assoc state :line (parallel-to-liniar line))))

(defn- extract-neighbors
  "Extract neighbors cells from a cell number"
  [num [x y]]
  (set (filter identity
               (map (fn [[dx dy] p]
                      (if (zero? (bit-and num p))
                        nil
                        [(+ x dx) (+ y dy)]))
                    directions pos))))

(defn- neighbors?
  "True if the cells are adiacent"
  [[x1 y1 _] [x2 y2 _]]
  (<= (+ (abs (- x1 x2))  (abs (- y1 y2))) neighbor-factor))

(defn- small-lineseq?
  "True if lineseq size is small (5-)"
  [lseq]
  (let [size (count lseq)]
    (and (pos? size) (< size 5))))

(defn- get-ltype
  "Returns the line sequence type: loop (0) or liniar (1)"
  [lseq]
  (if (and (not (small-lineseq? lseq)) (neighbors? (first lseq) (last lseq))) 0 1))

(defn- continuation?
  "True if the 2 line sequences are adiacent"
  [lseq1 lseq2]
  (neighbors? (last lseq1) (first lseq2)))

(defn- loop?
  "True if the 2 line sequences build a loop"
  [lseq1 lseq2]
  (and (neighbors? (first lseq1) (first lseq2))
       (neighbors? (last lseq1) (last lseq2))))

(defn- reverse-loop?
  "True if the 2 line sequences build a loop, second lseq is reversed"
  [lseq1 lseq2]
  (and (neighbors? (first lseq1) (last lseq2))
       (neighbors? (last lseq1) (first lseq2))))

(defn- process-lineseq
  [{:keys [prev res modifs-count]} lseq]
  (tap> tap-topic {:lseq lseq})
  (tap> tap-topic {:modifs-count modifs-count})
  (tap> tap-topic {:prev prev})
  (tap> tap-topic {:res res})
  (if (parallel-lineseq? lseq)
    (let [[lseq1 lseq2] lseq]
      (cond
        (= (or (get-ltype lseq1) 0) (= (get-ltype lseq2) 0))
        {:prev nil
         :res (filterv identity  (conj res prev lseq1 lseq2))
         :modifs-count (inc modifs-count)}
        (loop? lseq1 lseq2)
        {:prev nil
         :res (filterv identity  (conj res prev (into lseq1 (rseq lseq2))))
         :modifs-count (inc modifs-count)}
        :else
        {:prev lseq2
         :res (filterv identity  (conj res prev lseq1))
         :modifs-count (inc modifs-count)}))
    (cond
      (= (get-ltype lseq) 0)
      {:prev nil
       :res (filterv identity  (conj res prev lseq))
       :modifs-count modifs-count}
      (small-lineseq? prev) ; small  prev, add it to the lseq
      {:prev (into prev lseq)
       :res res
       :modifs-count (inc modifs-count)}
      (and prev (loop? prev lseq))
      {:prev nil
       :res (filterv identity  (conj res (into prev (rseq lseq))))
       :modifs-count (inc modifs-count)}
      (and prev (reverse-loop? prev lseq))
      {:prev nil
       :res (filterv identity  (conj res (into prev lseq)))
       :modifs-count (inc modifs-count)}
      :else
      {:prev lseq
       :res (filterv identity (conj res prev))
       :modifs-count modifs-count})))

(defn- median
  [coll]
  (let [sorted (sort coll)
        cnt (count sorted)
        halfway (quot cnt 2)]
    (nth sorted halfway)))

(def normalize-bin-size 5)

(defn- normalize-numseq
  [numseq bin-size]
  (mapv median (partition-all bin-size numseq)))

(defn- get-loop-start
  [line]
  (reduce (fn [{:keys [min-x min-y] :as res} [pos [x y _]]]
            (if (or (< x min-x) (and (= x min-x) (< y min-y)))
              {:min-x x :min-y y :min-pos pos}
              res))
          {:min-x (first (first line))
           :min-y (second (first line))
           :min-pos 0}
          (map-indexed list (rest line))))

(defn- normalize-loop
  [line]
  (let [pos (:min-pos (get-loop-start line))]
    (into (subvec line pos) (subvec line 0 pos))))

(defn- normalize-liniar
  [line]
  (if (utl/compare-cell (first line) (last line))
    (reverse line)
    line))

(defn- matrix-to-lineseq
  "Convert a word matrix in a vector of line sequences."
  [mat]
  (loop [state {:start-cells #{(get-start-cell mat)}
                :prev-cells #{}
                :line []}
         acc []]
    (tap> tap-topic state)
    (let [new-state (if (= (count (:start-cells state)) 1)
                      (get-liniar-sequence mat (assoc state :start-cell (first (:start-cells state))))
                      (get-parallel-sequence mat state))
          new-acc (conj acc (:line new-state))]
      (if (empty? (:start-cells new-state))
        (filterv seq new-acc)
        (recur new-state new-acc)))))

(defn- lineseq-to-lsign
  "Convert a LINESEQ in a lsign (a map with lineseq and ltype keys)."
  [lineseq]
  (let [ltype (get-ltype lineseq)
        ls (if (zero? ltype) (normalize-loop lineseq) (normalize-liniar lineseq))]
    {:ltype ltype
     :lineseq ls}))

(defn- lineseqs-to-wsign
  "Convert a sequence of LINESEQ in a wsign (a sequence of lsign)."
  [lineseqs]
  (let [{:keys [prev res modifs-count]} (reduce process-lineseq
                                                {:prev nil
                                                 :res []
                                                 :modifs-count 0}
                                                lineseqs)
        new-lineseqs (filterv identity (conj res prev))]
    (tap> tap-topic {:modifs modifs-count
                     :lineseq new-lineseqs})
    (if (zero? modifs-count)
      (mapv lineseq-to-lsign new-lineseqs)
      (lineseqs-to-wsign new-lineseqs))))

(defn- normalize1-lsign
  "LSIGN lineseq should start with the cell closest to the origin."
  [{:keys [lineseq] :as lsign}]
  (if (= 1 (utl/compare-cell (first lineseq)  (last lineseq)))
    (assoc lsign :lineseq (reverse lineseq))
    lsign))

(defn- normalize2-lsign
  "Shift LSIGN lineseq to axe origin."
  [{:keys [lineseq] :as lsign}]
  (let [x-min (apply min (map first lineseq))
        y-min (apply min (map second lineseq))
        new-lineseq (mapv (fn [[x y n]] [(- x x-min) (- y y-min) n]) lineseq)]
    (assoc lsign :lineseq new-lineseq)))

;; module entry points

(defn image-to-wsign
  "Convert an image in a wsign (a sequence of lsign)"
  [image]
  (->> image
       image-to-matrix
       matrix-to-lineseq
       lineseqs-to-wsign
       (map normalize1-lsign)
       (sort-by #(first (:lineseq %)) utl/compare-cell)
       (mapv normalize2-lsign)))

(comment

  (add-tap tap-topic (bound-fn* utl/print4tap))

  (def imagefile "test/resources/templates/template-017.png")

  (require '[steno.image-processor :as ip])

  (def matrix (-> imagefile
                  cv2/imread
                  ip/process-image
                  image-to-matrix))

  (def word-lineseq (-> matrix
                        matrix-to-lineseq))

  (def wsign (->> word-lineseq
                  format-wsign
                  (map normalize1-lsign)
                  (sort-by #(first (:lineseq %)) utl/compare-cell)))

  (def wsign2 (image-to-wsign  (cv2/imread imagefile)))

  (utl/start-proc utl/show-matrix matrix)

  (def mat2 (utl/lineseq-to-matrix (:lineseq (first wsign2))))

  (utl/start-proc utl/show-lsign (nth wsign2 2))

  ;;
  )
