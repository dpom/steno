(ns steno.core
  (:require
   [basilisp.edn :as edn]
   [basilisp.io :as bio]
   [clojure.string :as str]
   [steno.converter :as cnv]
   [steno.extractor :as ext]
   [steno.imageprocessor :as img]
   [steno.translator :as tra]
   [steno.translators.diff]
   [steno.translators.freq])
  (:import
   [argparse :as arg]
   cv2
   os
   [os.path :as path]
   [pyaml_env :as yml]
   uuid))

(defn remove-nil-values
  [dict]
  (reduce (fn [acc k]
            (if-let [v (get dict k)]
              (assoc acc k v)
              acc))
          {}
          dict))

(defn get-config
  [args]
  (let [config-file (.- args config)
        config (yml/parse_config config-file)
        dict-args (remove-nil-values (.- args __dict__))]
    (merge config dict-args)))

(defn action-help
  [config]
  (.print_help (get config "parser")))

(defn action-list-config
  [config]
  (println "Application config: " config))

(defn get-filename
  "Extract the name of a file without extension from a full PATH."
  [path]
  (-> path
      (path/basename)
      (path/splitext)
      (first)))

(defn get-word-images
  [infile]
  (println "- extract word images")
  (->> infile
       ext/extract-word-images
       (map img/process-image)))

(defn action-extract-words
  [config]
  (let [infile (get config "input")
        outdir (get config "output")]
    (println "Extract and process word images from " infile)
    (let [word-images (get-word-images infile)
          outname (get-filename infile)]
      (ext/save-word-images! word-images outname outdir)
      (println "Saved words in " outdir))))

(defn display-message
  [msg obj]
  (println msg)
  obj)

(defn action-translate
  [config]
  (let [infile (get config "input")
        outfile (get config "output")
        translators (get config "translators")]
    (println (format "Translate %s using %s" infile translators))
    (let [ctx (tra/prepare-translations config translators)
          traw (partial tra/translate-wsign ctx translators)]
      (->> infile
           (get-word-images)
           (display-message "- convert to wsign")
           (map cnv/image-to-wsign)
           (display-message "- translate wsigns")
           (map traw)
           (str/join " ")
           (spit outfile)))
    (println "Saved in " outfile)))

(defn save-corpus
  [filename corpus]
  (with-open [w (bio/writer filename)]
    (edn/write corpus w)))

(defn action-make-corpus
  [config]
  (let [infile (get config "input")
        outfile (get config "output")
        translators (get config "translators")]
    (printf "Make corpus %s using %s\n" infile translators)
    (let [ctx (tra/prepare-translations config translators)
          tral (partial tra/translate-lsign ctx translators)]
      (->> infile
           (get-word-images)
           (display-message "- convert to wsign")
           (map cnv/image-to-wsign)
           (display-message "- create corpus")
           (mapcat identity)
           (display-message "- translate lsigns")
           (map tral)
           (display-message "- add uuid")
           (mapv #(assoc % :id (uuid/uuid4)))
           (save-corpus outfile)))
    (println "Saved in " outfile)))

(def actions
  {"extract-words" action-extract-words
   "help"          action-help
   "list-config"   action-list-config
   "make-corpus"   action-make-corpus
   "translate"     action-translate})

(defn cli
  []
  (let [parser (arg/ArgumentParser ** :prog "steno" :description "Translate shorthand notes image in plain text")]
    (.add_argument parser "action" ** :help "the action to execute"
                   :choices (keys actions)
                   :default "help")
    (.add_argument parser  "-i" "--input" ** :help "the input of the action")
    (.add_argument parser "-o" "--output" ** :help "the output of the action")
    (.add_argument parser "-c" "--config" ** :help "the config file"
                   :default "resources/config.yml")
    (.add_argument parser "-f" "--freq_refseqs" ** :help "the reference sequences file for the freq translator")
    (.add_argument parser "-d" "--diff_references" ** :help "the reference sequences file for the diff translator")
    (.add_argument parser "-t" "--translators" ** :help "the translators to use"
                   :choices (keys (methods tra/translate))
                   :action "append")
    (let [args   (.parse_args parser)
          config (assoc (get-config args) "parser" parser)
          action (get actions (get config "action"))]
      (action config))))

(comment

  (def config (-> "resources/config.yml"
                  (yml/parse_config)
                  (remove-nil-values)))
  config
  ;; => {"diff_references" "resources/diff-references.edn" "freq_references" "resources/freq-references.edn" "translators" #py ["freq" "diff"]}

  (def translators (get config "translators"))

  (def ctx (tra/prepare-translations config translators))

  (def corpus (tra/load-edn "test/resources/corpus.edn"))

  (count corpus)

  (def lsign (nth corpus 41))

  (def res (tra/translate-lsign ctx translators lsign))
  ;; => {:text "pi" :id #uuid "2bd0b153-929c-4264-8ab0-1993bf422436" :letters [[["p" 0.8421052631578947] ["*" 0]] [["p" 0.9722222222222222] ["i" 0.8611111111111112]]] :ltype 1 :lineseq [[0 1 32] [1 1 34] [2 1 18] [3 0 33] [4 0 34] [5 0 34] [6 0 34] [7 0 34] [8 0 34] [9 0 34] [10 0 34] [11 0 34] [12 0 34] [13 0 34] [14 0 66] [15 1 36] [16 1 34] [17 1 34] [18 1 34] [19 1 18] [20 0 33] [21 0 34] [22 0 34] [23 0 34] [24 0 34] [25 0 34] [26 0 34] [27 0 34] [28 0 34] [29 0 66] [30 1 36] [31 1 34] [32 1 34] [33 1 34] [34 1 34] [35 1 34] [36 1 34] [37 1 34] [38 1 34] [39 1 66] [40 2 68] [41 3 132] [41 4 72] [42 5 132] [42 6 72] [43 7 132] [43 8 136] [43 9 136] [43 10 136] [43 11 9] [42 12 144] [42 13 9] [41 14 144] [41 15 9] [40 16 17] [39 17 18] [38 17 34] [37 17 33] [36 18 18] [35 18 34] [34 18 34] [33 18 34] [32 18 33] [31 19 18] [30 19 34] [29 19 32]]}

  (def letters (:letters res))
  ;; => [[["p" 0.8421052631578947] ["*" 0]] [["p" 0.9722222222222222] ["i" 0.8611111111111112]]]

  (defn compare-letters [l1 l2]
    (compare (second (first l2)) (second (first l1))))

  (first (sort compare-letters letters))
  ;; => ([["p" 0.9722222222222222] ["i" 0.8611111111111112]] [["p" 0.8421052631578947] ["*" 0]])

  (->> letters
       (sort compare-letters)
       (first)
       (map first)
       (apply str))

  (tra/translate-lsign ctx translators (dissoc lsign :text))

  ;;
  )
