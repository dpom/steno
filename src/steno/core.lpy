(ns steno.core
  (:require
   [steno.extractor :as ext]
   [steno.imageprocessor :as img]
   [steno.utils :as utl])
  (:import
   [argparse :as arg]
   [os :as os]
   [cv2 :as cv2]
   [pyaml_env :as yml]))

(defn get-config
  [args]
  (let [config-file (.- args config)
        config (yml/parse_config config-file)
        dict-args (.- args __dict__)]
    (merge config dict-args)))

(defn action-help
  [config]
  (.print_help (get config "parser")))

(defn action-list-config
  [config]
  (println "Application config: " config))

;; (defn action-extract-words
;;   [config]
;;   (let [in-filename (get config "input")
;;         outdir (or (get config "output") (get config "words_dir"))]
;;     (println "Extract and process word images from " in-filename)
;;     (let [word-images (->> in-filename
;;                            ext/extract-word-images
;;                            (map img/process-image))
;;           outname (utl/get-filename in-filename)]
;;       (ext/save-word-images! word-images outname outdir)
;;       (println "Saved words in " outdir))))

(defn action-dummy
  [_config]
  (println "Action dummy"))

(def actions
  {"help"          action-help
   "list_config"   action-list-config
   ;; "extract_words" action-extract-words
   "dummy"         action-dummy})

(defn cli
  []
  (let [parser (arg/ArgumentParser ** :prog "steno" :description "Translate shorthand notes image in plain text")]
    (.add_argument parser "action" ** :help "the action to execute"
                   :choices (keys actions)
                   :default "help")
    (.add_argument parser  "-i" "--input" ** :help "the input of the action")
    (.add_argument parser "-o" "--output" ** :help "the output of the action")
    (.add_argument parser "-c" "--config" ** :help "the config file"
                   :default "resources/config.yml")
    (.add_argument parser "-s" "--save_words" ** :help "save word images"
                   :action "store_true")
    (.add_argument parser "-w" "--words_dir" ** :help "the temporary directory to save word images"
                   :default "tmp/words")
    (let [args   (.parse_args parser)
          config (assoc (get-config args) "parser" parser)
          action (get actions (get config "action"))]
      (action config))))

(comment

  (def config (yml/parse_config "resources/config.yml"))

  (first
   (get config "translators"))
  ;; => "freq"

  ((get actions "list_config") config)

  ;;
  )
