(ns steno.core
  (:require
    [basilisp.edn :as edn]
    [basilisp.io :as bio]
    [clojure.string :as str]
    [steno.converter :as cnv]
    [steno.extractor :as ext]
    [steno.imageprocessor :as img]
    [steno.translator :as tra]
    [steno.translators.freq])
  (:import
    [argparse :as arg]
    cv2
    os
    [os.path :as path]
    [pyaml_env :as yml]
    uuid))

(defn remove-nil-values
  [dict]
  (reduce (fn [acc k]
            (if-let [v (get dict k)]
              (assoc acc k v)
              acc))
          {}
          dict))

(defn get-config
  [args]
  (let [config-file (.- args config)
        config (yml/parse_config config-file)
        dict-args (remove-nil-values (.- args __dict__))
        ;; map-args (zipmap (.keys dict-args) (.values dict-args))
        ]
    ;; (println (format "args: %s" map-args))
    ;; (merge-with (fn [a b] (if (nil? b) a b)) config dict-args)
    (merge config dict-args)))

(defn action-help
  [config]
  (.print_help (get config "parser")))

(defn action-list-config
  [config]
  (println "Application config: " config))

(defn get-filename
  "Extract the name of a file without extension from a full PATH."
  [path]
  (-> path
      (path/basename)
      (path/splitext)
      (first)))

(defn get-word-images
  [infile]
  (println "- extract word images")
  (->> infile
       ext/extract-word-images
       (map img/process-image)))

(defn action-extract-words
  [config]
  (let [infile (get config "input")
        outdir (get config "output")]
    (println "Extract and process word images from " infile)
    (let [word-images (get-word-images infile)
          outname (get-filename infile)]
      (ext/save-word-images! word-images outname outdir)
      (println "Saved words in " outdir))))

(defn display-message
  [msg obj]
  (println msg)
  obj)

(defn action-translate
  [config]
  (let [infile (get config "input")
        outfile (get config "output")
        translators (get config "translators")]
    (println (format "Translate %s using %s" infile translators))
    (let [traw (partial tra/translate-wsign translators)]
      (->> infile
           (get-word-images)
           (display-message "- convert to wsign")
           (map cnv/image-to-wsign)
           (display-message "- translate wsigns")
           (map traw)
           (str/join " ")
           (spit outfile)))
    (println "Saved in " outfile)))

(defn save-corpus
  [filename corpus]
  (with-open [w (bio/writer filename)]
    (edn/write corpus w)))

(defn action-make-corpus
  [config]
  (let [infile (get config "input")
        outfile (get config "output")
        translators (get config "translators")]
    (printf "Make corpus %s using %s\n" infile translators)
    (let [tral (partial tra/translate-lsign translators)]
      (->> infile
           (get-word-images)
           (display-message "- convert to wsign")
           (map cnv/image-to-wsign)
           (display-message "- create corpus")
           (mapcat identity)
           (display-message "- translate lsigns")
           (map tral)
           (display-message "- add uuid")
           (mapv #(assoc % :id (uuid/uuid4)))
           (save-corpus outfile)))
    (println "Saved in " outfile)))

(def actions
  {"extract-words" action-extract-words
   "help"          action-help
   "list-config"   action-list-config
   "make-corpus"   action-make-corpus
   "translate"     action-translate})

(defn cli
  []
  (let [parser (arg/ArgumentParser ** :prog "steno" :description "Translate shorthand notes image in plain text")]
    (.add_argument parser "action" ** :help "the action to execute"
                   :choices (keys actions)
                   :default "help")
    (.add_argument parser  "-i" "--input" ** :help "the input of the action")
    (.add_argument parser "-o" "--output" ** :help "the output of the action")
    (.add_argument parser "-c" "--config" ** :help "the config file"
                   :default "resources/config.yml")
    (.add_argument parser "-t" "--translators" ** :help "the translators used"
                   :choices (keys (methods tra/translate))
                   :action "append")
    (let [args   (.parse_args parser)
          config (assoc (get-config args) "parser" parser)
          action (get actions (get config "action"))]
      (action config))))

(comment

  (def infile "test/resources/template.png")

  ;;
  )
