(ns steno.utils
  (:import
    ;; [basilisp-pprint.pprint :as p]
   [basilisp.edn :as edn]
   [basilisp.io :as bio]
   [basilisp.core :as core]
   [multiprocessing :as mp]
   [numpy :as np]))

(defn start-proc
  "Start FUNC with ARG in a thread process and return its id."
  [func arg]
  (let [p (mp/Process ** :target func :args [arg])]
    (.start p)
    p))

;; (defn print4tap
;;   "Print function for tap>, useful in REPL."
;;   [map]
;;   (p/print-table (keys map) [map]))

(defn cells-to-matrix
  "Transform a sequence of CELLS ([x y]) into a matrix of dimensions SIZE ([x y])"
  [size cells]
  (let [mat (np/zeros size ** :dtype "int")]
    (doseq [[x y] cells]
      (aset mat x y 1))
    mat))

(defn lineseq-to-matrix
  [lineseq]
  (let [x-max (inc (apply max (map first lineseq)))
        y-max (inc (apply max (map second lineseq)))
        mat (np/zeros [x-max y-max] ** :dtype "int")]
    (doseq [[x y _] lineseq]
      (aset mat x y 1))
    mat))

(defn save-edn
  [filename entity]
  (with-open [w (bio/writer filename)]
    (edn/write entity w)))

(defn load-edn
  [filename]
  (with-open [r (bio/reader filename)]
    (edn/read r)))

(comment

  (add-tap (bound-fn* print4tap))

  (tap> {:a 2 :b 5})

  ;;
  )
