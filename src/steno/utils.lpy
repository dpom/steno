(ns steno.utils
  (:import
   [basilisp-pprint.pprint :as p]
   [multiprocessing :as mp]
   [numpy :as np]
   [os.path :as path]))

(defn start-proc
  "Start FUNC with ARG in a thread process and return its id."
  [func arg]
  (let [p (mp/Process ** :target func :args [arg])]
    (.start p)
    p))

(defn print4tap
  "Print function for tap>, useful in REPL."
  [map]
  (p/print-table (keys map) [map]))

(defn cells-to-matrix
  "Transform a sequence of CELLS ([x y]) into a matrix of dimensions SIZE ([x y])"
  [size cells]
  (let [mat (np/zeros size ** :dtype "int")]
    (doseq [[x y] cells]
      (aset mat x y 1))
    mat))

(defn lineseq-to-matrix
  [lineseq]
  (let [x-max (inc (apply max (map first lineseq)))
        y-max (inc (apply max (map second lineseq)))
        mat (np/zeros [x-max y-max] ** :dtype "int")]
    (doseq [[x y _] lineseq]
      (aset mat x y 1))
    mat))

(defn nested-levels
  "Return the depth level of a nested Vector."
  [v]
  (if (vector? v)
    (if (empty? v)
      1
      (let [max-nested (apply max (map nested-levels v))]
        (inc max-nested)))
    0))

(defn compare-cell
  "Compare CELLs with the format [x y ...]."
  [cell1 cell2]
  (compare (+ (first cell1) (second cell1))
           (+ (first cell2) (second cell2))))

(defn get-filename
  "Extract the name of a file without extension from a full PATH."
  [path]
  (-> path
      path/basename
      path/splitext
      first))

(comment

  (add-tap (bound-fn* print4tap))

  (tap> {:a 2 :b 5})

  (nested-levels [1 2 3])               ; => 1
  (nested-levels [[1 2] 3])             ; => 2
  (nested-levels [[1 2] [3 [4 5]]])     ; => 3
  (nested-levels [[[1]] [[2]]])         ; => 3
  (nested-levels "not a vector")        ; => 0

  (compare-cell [46 8] [22 9])
  ;; => 1

  (get-filename "test/resources/template.png")
  ;; => "template"

  ;;
  )
