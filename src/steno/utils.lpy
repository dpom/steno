(ns steno.utils
  (:import
    [basilisp-pprint.pprint :as p]
    [matplotlib :as matp]
    [matplotlib.pyplot :as plt]
    [numpy :as np]))


(defn show-image
  "Display an image using pyplot."
  [img]
  (plt/imshow img ** :cmap "gray")
  (plt/show))


(defn show-matrix
  "Display a binary matrix."
  [mat]
  (plt/imshow mat ** :cmap "gray" :interpolation "nearest")
  (plt/show))


(defn show-two-matrices
  "Display two matrices side by side."
  [img1 img2]
  (let [[_ axs] (plt/subplots 1 2 ** :figsize [100 100])]
    (.imshow (first axs) img1 ** :cmap "gray" :vmin 0 :vmax 1)
    (.imshow (second axs) img2 ** :cmap "gray" :vmin 0 :vmax 1)
    ;; (plt/tight_layout)
    (plt/show)))


(defn print4tap
  "Print function for tap>, useful in REPL"
  [map]
  (p/print-table (keys map) [map]))


(defn cells2matrix
  "Transform a sequence of CELLS ([x y]) into a matrix of dimensions SIZE ([x y])"
  [size cells]
  (let [mat (np/zeros size ** :dtype "int")]
    (doseq [[x y] cells]
      (aset mat x y 1))
    mat))


(defn nested-levels
  "Return the depth level of a nested vector"
  [v]
  (if (vector? v)
    (if (empty? v)
      1
      (let [max-nested (apply max (map nested-levels v))]
        (inc max-nested)))
    0))


(comment

  (add-tap (bound-fn* print4tap))

  (tap> {:a 2 :b 5})

  (nested-levels [1 2 3])               ; => 1
  (nested-levels [[1 2] [3 [4 5]]])     ; => 2
  (nested-levels [[[1]] [[2]]])         ; => 3
  (nested-levels "not a vector")        ; => 0

  ;;
  )
