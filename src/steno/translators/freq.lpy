(ns steno.translators.freq
  "Implement a translator based on cnum frequency"
  (:require
    [steno.translator :as tra]
    [steno.translators.freq :as freq])
  (:import
    [statistics :as st]))

(def tap-topic "freq")

(def ctx-key :freq-refseqs)
(def min-len-key :min-refseq)

(defn get-freq-diff
  "Compute the difference between a sequence frequencies and a reference one"
  [current reference]
  (reduce (fn [acc freq]
            (+ acc (abs (- (get reference freq) (get current freq 0)))))
          0
          (keys reference)))

(defn- check-ref
  "Check if a normalized sequence could be the reference sequence.

   Params:
   - nseq: (vector) the normalized sequence
   - nseq-len: (int) the normalized sequence length
   - result: (vector) the result if the nseq is not equal to refseq
   - refseq: (map) the reference sequence

   Returns: [letter <rest of nseq>] or result"
  [nseq nseq-len result {:keys [letter len len-tolerance freq freq-tolerance] :as refseq}]
  (tap> (select-keys refseq [:letter :len]))
  (if (> nseq-len (- len len-tolerance))
    (let [l (min nseq-len (+ len len-tolerance))
          ns (take l nseq)
          f (frequencies ns)
          t (get-freq-diff f freq)]
      (tap> {:l l :ns ns :f f :t t})
      (if (<= t freq-tolerance)
        (reduced [letter (drop l ns)])
        result))
    result))

(defn- translate-numseq
  "Translate a normalized CNUMSEQ of LTYPE."
  [ref-sequences cnumseq ltype]
  (let [dict (get ref-sequences (if (zero? ltype) :type-0 :type-1))
        min-refseq (get ref-sequences min-len-key)]
    (loop [s cnumseq
           acc ""]
      ;; (tap> tap-topic {:nseq s :acc acc})
      (let [l (count s)]
        (if (< l min-refseq)
          acc
          (let [[letter new-s] (reduce
                                #(check-ref s l %1 %2)
                                [tra/unknown-letter []]
                                dict)]
            (recur  new-s  (str acc letter))))))))

(defn- get-min-refseq
  "The length of the shortest type-1 reference sequence."
  [refsequences]
  (let [{:keys [len len-tolerance]} (last (:type-1 refsequences))]
    (- len len-tolerance)))

(defn match-freq
  [reference freq]
  (let [ref-keys (keys reference)
        [sum total] (reduce (fn [[sum total] k]
                              (let [r (get reference k)
                                    v (get freq k 0)]
                                [(+ sum (abs (- r v)))
                                 (+ total r v)]))
                            [0 0]
                            ref-keys)]
    (- 1 (python/float (/ sum total)))))

(defn add-freq
  [{:keys [lineseq] :as lsign}]
  (let [numseq (->> lineseq
                    (mapv last)
                    (tra/normalize-numseq))]
    (assoc lsign
           :numseq numseq
           :len (count numseq)
           :freq (frequencies numseq))))

(defn get-freq-keys
  [corpus]
  (->> corpus
       (mapcat #(keys (:freq %)))
       (frequencies)
       (filter (fn [[k v]] (> v (/ (count corpus) 2))))
       (map first)
       (sort)))

(defn normalize-freq
  [freq-keys freq]
  (reduce (fn [acc k]
            (assoc acc k (get freq k 0)))
          {}
          freq-keys))

(defn build-reference
  [corpus]
  (let [corpus* (map add-freq corpus)
        len-seq (map :len corpus*)
        freq-keys (get-freq-keys corpus*)
        freqs* (->> corpus*
                    (map :freq)
                    (map #(normalize-freq freq-keys %)))
        reference (zipmap freq-keys
                          (map (fn [k] (st/median_high (map #(get % k) freqs*))) freq-keys))]
    {:letter (:text (first corpus))
     :min-len (apply min len-seq)
     :max-len (apply max len-seq)
     :reference reference
     :min-match (apply min (map #(freq/match-freq reference %) freqs*))}))

;; entry points

(defmethod tra/prepare-translation "freq"
  [_ config]
  (let [filename (get config "freq_refseqs")
        refseqs (tra/load-edn filename)
        min-refseq (get-min-refseq refseqs)]
    (assoc config ctx-key (assoc refseqs min-len-key min-refseq))))

(defmethod tra/translate "freq"
  [_ ctx {:keys [ltype lineseq] :as lsign}]
  (let [refsequences (ctx-key ctx)
        cnumseq (tra/get-numseq lineseq)]
    (assoc lsign :text (translate-numseq refsequences cnumseq ltype))))

(defmethod tra/build-references "freq"
  [_ corpus]
  (let [brf (fn [c] (build-reference (filter #(= (:text %) c) corpus)))
        type-1 (->> tra/type-1-letters
                    (map brf)
                    (sort-by :min-len >)
                    vec)]
    {:type-0 (mapv brf tra/type-0-letters)
     :type-1 type-1
     :min-refseq (:min-len (last type-1))}))

(comment

  (def corpus (tra/load-edn "test/resources/corpus.edn"))

  (count corpus)

  (def references (tra/build-references "freq" corpus))

  ;;
  )
