(ns steno.translators.freq
  "Implement a translator based on cnum frequency"
  (:require
   [steno.translator :as tra]))

(def tap-topic "freq")

(def type-0-refsequences
  [{:letter "o"
    :len 17
    :len-tolerance 2
    :freq {34 3, 36 1, 72 2, 136 5, 17 2, 18 1}
    :freq-tolerance 5}
   {:letter "a"
    :len 10
    :len-tolerance 2
    :freq {34 2, 36 1, 68 1, 136 2, 17 2}
    :freq-tolerance 6}])

(def type-1-refsequences
  [{:letter "n"
    :len 17
    :freq {33 1 34 3 36 1 132 1 72 1 136 8 17 2}
    :freq-tolerance 5
    :len-tolerance 2}
   {:letter "j"
    :len 15
    :freq {33 1 34 1 66 3 36 1 68 1 132 1 136 3 144 1 17 2 18 1}
    :freq-tolerance 10
    :len-tolerance 2}
   {:letter "v"
    :len 14
    :freq {66 6 36 2 68 6}
    :freq-tolerance 4
    :len-tolerance 4}
   {:letter "m"
    :len 14
    :freq {33 1 34 4 132 1 136 4 17 3}
    :freq-tolerance 5
    :len-tolerance 3}
   {:letter "r"
    :len 14
    :freq {136 7 73 1 17 6}
    :freq-tolerance 2
    :len-tolerance 2}
   {:letter "s"
    :len 14
    :freq {33 1 34 2 66 1 68 1 136 3 17 1 18 2}
    :freq-tolerance 6
    :len-tolerance 2}
   {:letter "d"
    :len 14
    :freq {136 14}
    :freq-tolerance 4
    :len-tolerance 4}
   {:letter "g"
    :len 12
    :freq {33 2 17 2 18 8}
    :freq-tolerance 4
    :len-tolerance 4}
   {:letter "b"
    :len 12
    :freq {34 12}
    :freq-tolerance 4
    :len-tolerance 4}
   {:letter "l"
    :len 10
    :freq {136 7 9 2 144 1}
    :freq-tolerance 5
    :len-tolerance 2}
   {:letter "f"
    :len 7
    :freq {66 3 36 1 68 3}
    :freq-tolerance 2
    :len-tolerance 2}
   {:letter "i"
    :len 7
    :freq {34 3 68 1 132 1 136 1 17 1}
    :freq-tolerance 2
    :len-tolerance 2}
   {:letter "t"
    :len 7
    :freq {136 7}
    :freq-tolerance 2
    :len-tolerance 2}
   {:letter "c"
    :len 6
    :freq {33 1 17 1 18 4}
    :freq-tolerance 2
    :len-tolerance 2}
   {:letter "e"
    :len 6
    :freq {33 1 66 1 36 1 136 2 18 1}
    :freq-tolerance 2
    :len-tolerance 2}
   {:letter "p"
    :len 6
    :freq {34 6}
    :freq-tolerance 2
    :len-tolerance 2}])

(def ^{:doc "The length of the shortest reference sequence"} min-refseq
  (let [{:keys [len len-tolerance]} (last type-1-refsequences)]
    (- len len-tolerance)))

(defn- median
  [coll]
  (let [sorted (sort coll)
        cnt (count sorted)
        halfway (quot cnt 2)]
    (nth sorted halfway)))

(def normalize-bin-size 3)

(defn normalize-numseq
  [numseq]
  (mapv median (partition-all normalize-bin-size numseq)))

(defn- get-freq-diff
  "Compute the difference between a sequence frequencies and a reference one"
  [current reference]
  (reduce (fn [acc freq]
            (+ acc (abs (- (get reference freq) (get current freq 0)))))
          0
          (keys reference)))

(defn- check-ref
  "Check if a normalized sequence could be the reference sequence.

   Params:
   - nseq: (vector) the normalized sequence
   - nseq-len: (int) the normalized sequence length
   - result: (vector) the result if the nseq is not equal to refseq
   - refseq: (map) the reference sequence

   Returns: [letter <rest of nseq>] or result"
  [nseq nseq-len result {:keys [letter len len-tolerance freq freq-tolerance] :as refseq}]
  (tap> (select-keys refseq [:letter :len]))
  (if (> nseq-len (- len len-tolerance))
    (let [l (min nseq-len (+ len len-tolerance))
          ns (take l nseq)
          f (frequencies ns)
          t (get-freq-diff f freq)]
      (tap> {:l l :ns ns :f f :t t})
      (if (<= t freq-tolerance)
        (reduced [letter (drop l ns)])
        result))
    result))

(defn- translate-numseq
  "Translate a normalized CNUMSEQ ot LTYPE."
  [cnumseq ltype]
  (let [dict (if (zero? ltype) type-0-refsequences type-1-refsequences)]
    (loop [s cnumseq
           acc ""]
      ;; (tap> tap-topic {:nseq s :acc acc})
      (let [l (count s)]
        (if (< l min-refseq)
          acc
          (let [[letter new-s] (reduce
                                #(check-ref s l %1 %2)
                                [tra/unknown-letter []]
                                dict)]
            (recur  new-s  (str acc letter))))))))

;; entry point

(defmethod tra/translate "freq"
  [_ {:keys [ltype lineseq] :as lsign}]
  (let [cnumseq (->> lineseq
                     (map #(nth % 2))
                     (normalize-numseq))]
    (assoc lsign :text (translate-numseq cnumseq ltype))))

(comment

  (require
   '[basilisp.io :as bio]
   '[basilisp.edn :as edn]
   '[steno.utils :as utl]
   '[steno.show :as show])

  (defn load-corpus
    [filename]
    (with-open [r (bio/reader filename)]
      (edn/read r)))

  (def tcorpus (load-corpus "test/resources/corpus-template.edn"))

  (count tcorpus)
  ;; => 45

  (def o-corp (filter #(= (:text %) "o") tcorpus))

  (count o-corp)
  ;; => 6

  (utl/start-proc  show/show-lsign (nth o-corp 2))

  (defn add-freq
    [{:keys [lineseq] :as lsign}]
    (let [numseq (mapv last lineseq)
          nnumseq (normalize-numseq numseq)]
      (assoc lsign
             :numseq numseq
             :nnumseq nnumseq
             :len (count nnumseq)
             :freq (frequencies nnumseq))))

  (def o-corp* (mapv add-freq o-corp))

  (first o-corp*)
  ;; => {:freq {33 2 34 4 36 1 68 1 72 1 136 5 144 1 17 4} :text "o" :len 19 :id #uuid "64e8d2a7-73f6-4d24-a511-6536a9d4621c" :numseq [136 136 17 17 9 144 9 144 9 144 17 17 17 17 17 33 18 33 34 34 34 34 34 66 36 34 34 34 66 68 68 68 68 68 132 72 132 72 5 144 136 136 9 144 136 136 9 144 136 9 144 9 17 144 9 17 17 17 17 18 33 18 34 34 33 18 34 34 34 33 18 34 34 34 34 34 34 36 68 68 72 136 136 136 136 136 136 136 136 136 136 136 136 136 136] :nnumseq [17 144 17 33 34 34 68 72 136 136 17 17 33 34 34 36 136 136 136] :ltype 0 :lineseq [[0 17 136] [0 16 136] [1 14 17] [2 13 17] [3 12 9] [3 11 144] [4 10 9] [4 9 144] [5 8 9] [5 7 144] [6 6 17] [7 5 17] [8 4 17] [9 3 17] [10 2 17] [11 1 33] [12 1 18] [13 0 33] [14 0 34] [15 0 34] [16 0 34] [17 0 34] [18 0 34] [19 0 66] [20 1 36] [21 1 34] [22 1 34] [23 1 34] [24 1 66] [25 2 68] [26 3 68] [27 4 68] [28 5 68] [29 6 68] [30 7 132] [30 8 72] [31 9 132] [31 10 72] [32 11 5] [31 12 144] [31 13 136] [31 14 136] [31 15 9] [30 16 144] [30 17 136] [30 18 136] [30 19 9] [29 20 144] [29 21 136] [29 22 9] [28 23 144] [28 24 9] [27 25 17] [26 26 144] [26 27 9] [25 28 17] [24 29 17] [23 30 17] [22 31 17] [21 32 18] [20 32 33] [19 33 18] [18 33 34] [17 33 34] [16 33 33] [15 34 18] [14 34 34] [13 34 34] [12 34 34] [11 34 33] [10 35 18] [9 35 34] [8 35 34] [7 35 34] [6 35 34] [5 35 34] [4 35 34] [3 35 36] [2 34 68] [1 33 68] [0 32 72] [0 31 136] [0 30 136] [0 29 136] [0 28 136] [0 27 136] [0 26 136] [0 25 136] [0 24 136] [0 23 136] [0 22 136] [0 21 136] [0 20 136] [0 19 136] [0 18 136]]}

  (map #(select-keys % [:len :freq]) o-corp*)
  ({:freq {33 2 34 4 36 1 68 1 72 1 136 5 144 1 17 4} :len 19}
   {:freq {33 1 34 6 66 1 36 1 68 1 132 2 136 3 9 1 144 1 17 2} :len 19}
   {:freq {34 6 66 1 36 1 72 1 136 4 17 2 18 1} :len 16}
   {:freq {34 2 66 1 36 1 68 1 72 2 136 5 17 3 18 1} :len 16}
   {:freq {34 4 66 1 72 2 136 5 144 1 17 1 18 1} :len 15}
   {:freq {34 2 68 1 132 1 72 2 136 6 17 3} :len 15})

  (import [statistics :as st])

  (st/mean (map :len o-corp*))
  ;; => 16.666666666666668

  (st/mean (map #(get-in % [:freq 34]) o-corp*))
  ;; => 4

  (defn compute-mean-and-tolerance
    [nums]
    (let [mean-v (round (st/mean nums))
          max-v (apply max nums)
          min-v (apply min nums)]
      {:mean mean-v
       :tolerance (max (- max-v mean-v) (- mean-v min-v))}))

  (compute-mean-and-tolerance (map :len o-corp*))
  ;; => {:tolerance 2 :mean 17}

  (set  (mapcat #(keys (:freq %)) o-corp*))
  ;; => #{33 34 66 36 68 132 72 136 9 144 17 18}

  (frequencies (mapcat #(keys (:freq %)) o-corp*))
  ;; => {33 2 34 6 66 4 36 4 68 4 132 2 72 5 136 6 9 1 144 3 17 6 18 3}

  (defn get-freq-keys
    [corpus]
    (->> corpus
         (mapcat #(keys (:freq %)))
         (frequencies)
         (filter (fn [[k v]] (> v (/ (count corpus) 2))))
         (map first)
         (sort)))

  (def freq-keys (get-freq-keys o-corp*))
  ;; => (17 34 36 66 68 72 136)

  (def freq (:freq (first o-corp*)))
    ;; => {33 2 34 4 36 1 68 1 72 1 136 5 144 1 17 4}

  (defn normalize-freq
    [freq-keys freq]
    (reduce (fn [acc k]
              (assoc acc k (get freq k 0)))
            {}
            freq-keys))

  (normalize-freq freq-keys freq)
  ;; => {34 4 66 0 36 1 68 1 72 1 136 5 17 4}

  (def freqs*
    (->> o-corp*
         (map :freq)
         (map #(normalize-freq freq-keys %))))
  ;; => ({34 4 66 0 36 1 68 1 72 1 136 5 17 4} {34 6 66 1 36 1 68 1 72 0 136 3 17 2} {34 6 66 1 36 1 68 0 72 1 136 4 17 2} {34 2 66 1 36 1 68 1 72 2 136 5 17 3} {34 4 66 1 36 0 68 0 72 2 136 5 17 1} {34 2 66 0 36 0 68 1 72 2 136 6 17 3})

  (map
   (fn [x]
     (assoc (compute-mean-and-tolerance
             (map #(get % x) freqs*))
            :key x))
   freq-keys)
;; => ({:key 17 :tolerance 2 :mean 2} {:key 34 :tolerance 2 :mean 4} {:key 36 :tolerance 1 :mean 1} {:key 66 :tolerance 1 :mean 1} {:key 68 :tolerance 1 :mean 1} {:key 72 :tolerance 1 :mean 1} {:key 136 :tolerance 2 :mean 5})

;; => {:tolerance 2 :mean 4}

  (map (fn [k] (assoc (compute-mean-and-tolerance (map (fn [f]))))))

  (defn compute-reference
    [corpus]
    (let [corpus* (map add-freq corpus)
          {len :mean len-tolerance :tolerance} (compute-mean-and-tolerance (map :len corpus*))
          freq-keys (get-freq-keys corpus*)
          freqs* (->> corpus*
                      (map :freq)
                      (map #(normalize-freq freq-keys %)))
          ref-freqs (map
                     (fn [x]
                       (assoc (compute-mean-and-tolerance
                               (map #(get % x) freqs*))
                              :key x))

                     freq-keys)
          freq-ref (reduce (fn [{:keys [freq freq-tolerance]} {:keys [key tolerance mean]}]
                             {:freq (assoc freq key mean)
                              :freq-tolerance (+ tolerance freq-tolerance)})
                           {:freq {} :freq-tolerance 0}
                           ref-freqs)]
      (assoc freq-ref
             :letter (:text (first corpus))
             :len len
             :len-tolerance len-tolerance)))

  (compute-reference o-corp)
  ;; => {:letter "o" :freq-tolerance 10 :freq {34 4 66 1 36 1 68 1 72 1 136 5 17 2} :len 17 :len-tolerance 2}

;;
  )
