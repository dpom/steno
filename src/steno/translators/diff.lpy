(ns steno.translators.diff
  "Implement a translator based on cnum difference"
  (:require
   [steno.translator :as tra]
   [steno.translators.diff :as diff])
  (:import
   [statistics :as st]))

(def ctx-key :diff-references)

(def min-len-key :min-refseq)

(def ref-key :references)

(def one-bit-num
  [0 1 1 2 1 2 2 3 1 2 2 3 2 3 3 4
   1 2 2 3 2 3 3 4 2 3 3 4 3 4 4 5
   1 2 2 3 2 3 3 4 2 3 3 4 3 4 4 5
   2 3 3 4 3 4 4 5 3 4 4 5 4 5 5 6
   1 2 2 3 2 3 3 4 2 3 3 4 3 4 4 5
   2 3 3 4 3 4 4 5 3 4 4 5 4 5 5 6
   2 3 3 4 3 4 4 5 3 4 4 5 4 5 5 6
   3 4 4 5 4 5 5 6 4 5 5 6 5 6 6 7
   1 2 2 3 2 3 3 4 2 3 3 4 3 4 4 5
   2 3 3 4 3 4 4 5 3 4 4 5 4 5 5 6
   2 3 3 4 3 4 4 5 3 4 4 5 4 5 5 6
   3 4 4 5 4 5 5 6 4 5 5 6 5 6 6 7
   2 3 3 4 3 4 4 5 3 4 4 5 4 5 5 6
   3 4 4 5 4 5 5 6 4 5 5 6 5 6 6 7
   3 4 4 5 4 5 5 6 4 5 5 6 5 6 6 7
   4 5 5 6 5 6 6 7 5 6 6 7 6 7 7 8])

(defn get-diff
  "Get the number of diff bits between NUMSEQ1 and NUMSEQ2."
  [numseq1 numseq2]
  (apply + (mapv #(nth one-bit-num (bit-not (bit-xor %1 %2))) numseq1 numseq2)))

(defn get-best-match
  "Get the best match between a REFERENCE and a NUMSEQ. Returns a map with best subsequence, its length and the diff value."
  [reference numseq]
  (let [ref-len (count reference)
        numseq-len (count numseq)]
    (if (= ref-len numseq-len)
      {:best numseq
       :len numseq-len
       :diff (get-diff reference numseq)}
      (reduce (fn [{:keys [diff] :as acc} pos]
                (let [new-best (aslice numseq pos (+ pos ref-len))
                      new-diff (get-diff reference new-best)]
                  (if (> new-diff diff)
                    {:diff new-diff
                     :len (+ pos ref-len)
                     :best new-best}
                    acc)))
              {:diff 0
               :best []}
              (range (inc (- numseq-len ref-len)))))))

(defn check-letter
  [{:keys [letter min-len max-len max-bits reference]} numseq]
  (let [numseq-len (count numseq)]
    (if (< numseq-len min-len)
      nil
      (let [{:keys [diff len]} (get-best-match reference (aslice numseq (min numseq-len max-len)))
            _ (printf "diff: %d, len %d, max-bits: %d\n" diff len max-bits)
            match (tra/compute-match max-bits diff)]
        [letter match len]))))

(defn- check-letters
  [references numseq]
  (let [matches (reduce (fn [acc ref]
                          (if-let [new-letter (check-letter ref numseq)]
                            (conj acc new-letter)
                            acc))
                        []
                        references)
        _ (printf "matches: %s\n" matches)
        [letter match len] (->> matches
                                (sort-by second)
                                (last))]
    [[letter match] (aslice numseq len (count numseq))]))

(defn- translate-numseq
  "Translate a normalized CNUMSEQ of LTYPE."
  [{:keys [type-0 type-1 min-refseq]} cnumseq ltype]
  (if (zero? ltype)
    [(aslice (check-letters type-0 cnumseq) 2)]
    (loop [s cnumseq
           acc []]
      (let [l (count s)]
        (if (< l min-refseq)
          acc
          (let [[letter new-s] (check-letters type-1 s)]
            (recur new-s (conj acc letter))))))))

(defn add-numseq
  [{:keys [lineseq] :as lsign}]
  (let [numseq (tra/normalize-numseq (mapv last lineseq))
        len (count numseq)]
    (assoc lsign
           :numseq numseq
           :len len)))

(defn make-median-numseq
  [numseqs]
  (let [len (count (first numseqs))]
    (reduce (fn [acc pos]
              (conj acc (st/median_high (map #(nth % pos) numseqs))))
            []
            (range len))))

(defn build-reference
  [corpus]
  (let [corpus* (map add-numseq corpus)
        min-len (apply min (map :len corpus*))
        max-len (apply max (map :len corpus*))
        ref-numseqs (->> corpus*
                         (filter #(= (:len %) min-len))
                         (map :numseq))
        ref-numseq* (if (= (count ref-numseqs) 1)
                      (first ref-numseqs)
                      (make-median-numseq ref-numseqs))
        ref-numseq (->> corpus*
                        (map :numseq)
                        (map #(diff/get-best-match ref-numseq* %))
                        (map :best)
                        (make-median-numseq))
        letter-reference {:letter (:text (first corpus))
                          :min-len min-len
                          :max-len max-len
                          :reference ref-numseq
                          :max-bits (* 8 min-len)}]
    (assoc letter-reference :min-match
           (apply min
                  (->> corpus*
                       (map :numseq)
                       (map #(diff/check-letter letter-reference %))
                       (mapv second))))))

;; entry points

(defmethod tra/prepare-translation "diff"
  [_ config]
  (let [filename (get config "diff_references")
        refseqs (tra/load-edn filename)
        min-refseq (:min-len (last refseqs))]
    (assoc config ctx-key {ref-key refseqs
                           min-len-key min-refseq})))

(defmethod tra/translate "diff"
  [_ ctx {:keys [ltype lineseq text] :or {text []} :as lsign}]
  (let [references (ctx-key ctx)
        cnumseq (tra/get-numseq lineseq)]
    (assoc lsign :text (conj text (translate-numseq references cnumseq ltype)))))

(defmethod tra/build-references "diff"
  [_ corpus]
  (let [brf (fn [c] (build-reference (filter #(= (:text %) c) corpus)))
        type-1 (->> tra/type-1-letters
                    (map brf)
                    (sort-by :min-len >)
                    vec)]
    {:type-0 (mapv brf tra/type-0-letters)
     :type-1 type-1
     :min-refseq (:min-len (last type-1))}))

(comment

  (def corpus (tra/load-edn "test/resources/corpus.edn"))

  (count corpus)

  (def references (tra/build-references "diff" corpus))

  (tra/save-edn "resources/diff-references.edn" references)

  (def ctx {ctx-key references})

  (def lsign {:id #uuid "2bd0b153-929c-4264-8ab0-1993bf422436" :ltype 1 :lineseq [[0 1 32] [1 1 34] [2 1 18] [3 0 33] [4 0 34] [5 0 34] [6 0 34] [7 0 34] [8 0 34] [9 0 34] [10 0 34] [11 0 34] [12 0 34] [13 0 34] [14 0 66] [15 1 36] [16 1 34] [17 1 34] [18 1 34] [19 1 18] [20 0 33] [21 0 34] [22 0 34] [23 0 34] [24 0 34] [25 0 34] [26 0 34] [27 0 34] [28 0 34] [29 0 66] [30 1 36] [31 1 34] [32 1 34] [33 1 34] [34 1 34] [35 1 34] [36 1 34] [37 1 34] [38 1 34] [39 1 66] [40 2 68] [41 3 132] [41 4 72] [42 5 132] [42 6 72] [43 7 132] [43 8 136] [43 9 136] [43 10 136] [43 11 9] [42 12 144] [42 13 9] [41 14 144] [41 15 9] [40 16 17] [39 17 18] [38 17 34] [37 17 33] [36 18 18] [35 18 34] [34 18 34] [33 18 34] [32 18 33] [31 19 18] [30 19 34] [29 19 32]]})

  (def cnumseq (tra/get-numseq (:lineseq lsign)))
  ;; => [32 34 34 34 34 34 33 34 34 34 34 34 34 68 72 136 136 9 18 33 34 32]

  (def cnumseq-len (count cnumseq))
  ;; => 22

  (def p-ref (->> references
                  :type-1
                  (filter #(= "p" (:letter %)))))

  (check-letter p-ref cnumseq)
  ;; => ["p" 0.9722222222222222 10]

  (check-letters (:type-1 references) cnumseq)
  ;; => [["p" 0.9722222222222222] [34 34 34 68 72 136 136 9 18 33 34 32]]

  (translate-numseq references cnumseq 1)
  ;; => [["p" 0.9722222222222222] ["i" 0.8611111111111112]]

  (tra/translate "diff" ctx lsign)
  ;; => {:text [[["p" 0.9722222222222222] ["i" 0.8611111111111112]]] :id #uuid "2bd0b153-929c-4264-8ab0-1993bf422436" :ltype 1 :lineseq [[0 1 32] [1 1 34] [2 1 18] [3 0 33] [4 0 34] [5 0 34] [6 0 34] [7 0 34] [8 0 34] [9 0 34] [10 0 34] [11 0 34] [12 0 34] [13 0 34] [14 0 66] [15 1 36] [16 1 34] [17 1 34] [18 1 34] [19 1 18] [20 0 33] [21 0 34] [22 0 34] [23 0 34] [24 0 34] [25 0 34] [26 0 34] [27 0 34] [28 0 34] [29 0 66] [30 1 36] [31 1 34] [32 1 34] [33 1 34] [34 1 34] [35 1 34] [36 1 34] [37 1 34] [38 1 34] [39 1 66] [40 2 68] [41 3 132] [41 4 72] [42 5 132] [42 6 72] [43 7 132] [43 8 136] [43 9 136] [43 10 136] [43 11 9] [42 12 144] [42 13 9] [41 14 144] [41 15 9] [40 16 17] [39 17 18] [38 17 34] [37 17 33] [36 18 18] [35 18 34] [34 18 34] [33 18 34] [32 18 33] [31 19 18] [30 19 34] [29 19 32]]}

  (tra/translate "diff" ctx (dissoc (nth corpus 0) :text))
  ;; => {:text [[["p" 0.9722222222222222]]] :id #uuid "23e402a2-f146-4762-ac6b-1791f32e855a" :ltype 1 :lineseq [[0 3 16] [1 2 33] [2 2 18] [3 1 33] [4 1 34] [5 1 34] [6 1 34] [7 1 34] [8 1 18] [9 0 33] [10 0 34] [11 0 34] [12 0 34] [13 0 34] [14 0 34] [15 0 66] [16 1 36] [17 1 18] [18 0 33] [19 0 34] [20 0 34] [21 0 34] [22 0 34] [23 0 66] [24 1 36] [25 1 34] [26 1 34] [27 1 34] [28 1 34] [29 1 34] [30 1 34] [31 1 34] [32 1 34] [33 1 2]]}

  (tra/translate "diff" ctx (dissoc (nth corpus 7) :text))
  ;; => {:text [[["t" 0.825] ["p" 0.7222222222222222]]] :id #uuid "f7243ddb-9dc8-4544-9462-dd6d56220a4f" :ltype 1 :lineseq [[24 0 2] [23 0 34] [22 0 33] [21 1 18] [20 1 33] [19 2 18] [18 2 33] [17 3 17] [16 4 18] [15 4 33] [14 5 18] [13 5 33] [12 6 17] [11 7 17] [10 8 17] [9 9 17] [8 10 17] [7 11 17] [6 12 144] [6 13 9] [5 14 144] [5 15 136] [5 16 9] [4 17 144] [4 18 9] [3 19 144] [3 20 9] [2 21 144] [2 22 9] [1 23 144] [1 24 9] [0 25 144] [0 26 136] [0 27 136] [0 28 136] [0 29 136] [0 30 136] [0 31 136] [0 32 136] [0 33 72] [1 34 132] [1 35 136] [1 36 72] [2 37 132] [2 38 72] [3 39 68] [4 40 132] [4 41 72] [5 42 68] [6 43 68] [7 44 68] [8 45 36] [9 45 66] [10 46 36] [11 46 66] [12 47 36] [13 47 66] [14 48 36] [15 48 66] [16 49 36] [17 49 66] [18 50 68] [19 51 36] [20 51 66] [21 52 36] [22 52 34] [23 52 34] [24 52 66] [25 53 36] [26 53 34] [27 53 66] [28 54 4]]}

  ;;
  )
