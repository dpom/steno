(ns steno.translators.freqrefbuilder
  "Build refernces for frequency translator"
  (:require
   [basilisp.io :as bio]
   [basilisp.edn :as edn]
   [steno.translators.freq :as freq])
  (:import
   [statistics :as st]))

(defn load-corpus
  [filename]
  (with-open [r (bio/reader filename)]
    (edn/read r)))

(defn add-freq
  [{:keys [lineseq] :as lsign}]
  (let [numseq (mapv last lineseq)
        nnumseq (freq/normalize-numseq numseq)]
    (assoc lsign
           :numseq numseq
           :nnumseq nnumseq
           :len (count nnumseq)
           :freq (frequencies nnumseq))))

(defn compute-mean-and-tolerance
  [nums]
  (let [mean-v (round (st/mean nums))
        max-v (apply max nums)
        min-v (apply min nums)]
    {:mean mean-v
     :tolerance (max (- max-v mean-v) (- mean-v min-v))}))

(defn get-freq-keys
  [corpus]
  (->> corpus
       (mapcat #(keys (:freq %)))
       (frequencies)
       (filter (fn [[k v]] (> v (/ (count corpus) 2))))
       (map first)
       (sort)))

(defn normalize-freq
  [freq-keys freq]
  (reduce (fn [acc k]
            (assoc acc k (get freq k 0)))
          {}
          freq-keys))

;; entry point

(defn compute-reference
  [corpus]
  (let [corpus* (map add-freq corpus)
        {len :mean len-tolerance :tolerance} (compute-mean-and-tolerance (map :len corpus*))
        freq-keys (get-freq-keys corpus*)
        freqs* (->> corpus*
                    (map :freq)
                    (map #(normalize-freq freq-keys %)))
        ref-freqs (map
                   (fn [x]
                     (assoc (compute-mean-and-tolerance
                             (map #(get % x) freqs*))
                            :key x))

                   freq-keys)
        freqs (reduce (fn [acc {:keys [key mean]}]
                        (assoc acc key mean))
                      {}
                      ref-freqs)
        freq-tolerance (apply max (map #(freq/get-freq-diff % freqs) (map :freq corpus*)))]
    {:letter (:text (first corpus))
     :len len
     :len-tolerance len-tolerance
     :freq freqs
     :freq-tolerance freq-tolerance}))

(comment

  (require
   '[steno.utils :as utl]
   '[steno.show :as show])

  (def tcorpus (load-corpus "test/resources/corpus-template.edn"))

  (count tcorpus)

  (utl/start-proc  show/show-lsign (nth tcorpus 44))

  (def a-corp (filter #(= (:text %) "a") tcorpus))

  (count a-corp)
  ;; => 7

  (def a-corp* (mapv add-freq a-corp))

  (map :len a-corp*)
  ;; => (18 16 18 15 19 13 14)

  (utl/start-proc  show/show-lsign (nth a-corp 4))

  (compute-reference a-corp)
  ;; => {:letter "a" :freq-tolerance 11 :freq {33 1 34 2 66 1 36 2 68 1 132 1 72 1 136 5 17 1 18 1} :len 16 :len-tolerance 3}

  (def o-corp (filter #(= (:text %) "o") tcorpus))

  (compute-reference o-corp)
  ;; => {:letter "o" :freq-tolerance 14 :freq {33 2 34 5 36 2 68 2 132 2 72 2 136 7 9 1 144 1 17 4} :len 28 :len-tolerance 4}

;;
  )
