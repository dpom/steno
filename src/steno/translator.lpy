(ns steno.translator
  (:require
   [basilisp.edn :as edn]
   [basilisp.io :as bio])
  (:import
   [statistics :as st]))

(def ^{:doc "The unknown letter indicator"} unknown-letter "*")

(def type-0-letters ["o" "a"])

(def type-1-letters ["p" "t" "c" "f" "l" "m" "n" "j" "s" "e" "i"])

;; Create the necessary context for the translation using the application configuration
(defmulti prepare-translation
  (fn [name _config] name))

;; The translation function, receives a context and a lsign and returns a lsign to which the :text key is added with the lsign translation
(defmulti translate
  (fn [name _ctx _lsign] name))

;; The function for references building, receive a corpus and returns a references map
(defmulti build-references
  (fn [name _corpus] name))

(def normalize-bin-size 3)

(defn normalize-numseq
  [numseq]
  (mapv st/median_high (partition-all normalize-bin-size numseq)))

(defn get-numseq
  [lineseq]
  (->> lineseq
       (map #(nth % 2))
       (normalize-numseq)))

(defn select-char
  [new-text old-text]
  (apply str (map (fn [new old] (if (= new unknown-letter) old new))
                  new-text old-text)))

(defn load-edn
  "Load an entity from an edn file with FILENAME."
  [filename]
  (with-open [r (bio/reader filename)]
    (edn/read r)))

(defn save-edn
  "Save an entity in an edn file."
  [filename entity]
  (with-open [w (bio/writer filename)]
    (edn/write entity w)))

(defn compute-match
  "Compute the MATCH probability using MAX-MATCH value."
  [max-match match]
  (python/float (* (/ match max-match))))

;; entry points

(defn prepare-translations
  "Create the context for all translators."
  [config translators]
  (reduce #(prepare-translation %2 %1) config translators))

(defn compare-letters
  "Letters comparator, best match first."
  [l1 l2]
  (let [p1 (if (= 1 (count l1)) (second (first l1)) (apply * (mapv second l1)))
        p2 (if (= 1 (count l2)) (second (first l2)) (apply * (mapv second l2)))]
    (compare p2 p1)))

(defn get-best-match
  "Convert best match LETTERS in string."
  [letters]
  (printf "letters: %s\n" letters)
  (->> letters
       (sort compare-letters)
       (first)
       (map first)
       (apply str)))

(defn translate-lsign
  "Translate to LSIGN  using TRANSLATORS functions, returns the lsign augmented with the translation in :text.

  Each translator is a function which receive a lsign and returns the same lsign with :text modified (possibly)."
  [ctx translators lsign]
  (let [res (reduce (fn [acc x] (translate x ctx acc)) lsign translators)
        text (get-best-match (:letters res))]
    (printf "text: %s\n" text)
    (assoc res :text text)))

(defn translate-wsign
  "Translate a wsign, returns the equivalent text."
  [ctx translators wsign]
  (let [tr (partial translate-lsign ctx translators)]
    (->> wsign
         (map tr)
         (mapv :text)
         (apply str))))


